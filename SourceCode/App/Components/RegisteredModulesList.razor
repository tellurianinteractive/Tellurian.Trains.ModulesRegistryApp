@inject IStringLocalizer<App> Localizer
@inject LayoutService LayoutService

@if (UseTableLayout)
{
    <TableTemplate Items="LayoutModules">
        <TableHeader>
            <th>@Localizer["Package"]</th>
            <th>@Localizer["Module"]</th>
            <th>@Localizer["Owner"]</th>
            <th>@Localizer["RegistrationTime"]</th>
            <th>@Localizer["Actions"]</th>
        </TableHeader>
        <RowTemplate Context="item">
            <td>@item.Module.PackageName()</td>
            <td>@item.Module.FullName</td>
            <td>@item.Module.ModuleOwnerships.OwnerNames()</td>
            <td>@item.RegisteredTime.ToString("g")</td>
        </RowTemplate>
    </TableTemplate>
}
else if (LayoutModules is not null)
{
    @foreach (var item in LayoutModules)
    {
        @if (item.Module.IsStation())
        {
            <span>@item.Module.StationName() </span>
            <span><a href="@WaybillsHref(item)">@Localizer["Waybills"]</a></span>
        }
        else
        {
            <span>@item.Module.Name()</span>
        }
        @if (item.Id != LayoutModules.Last().Id)
        {
            <span>, </span>
        }
    }
}


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int LayoutId { get; set; }
    [Parameter] public int PersonId { get; set; }
    [Parameter] public bool UseTableLayout { get; set; }

    private ClaimsPrincipal? Principal;
    private IEnumerable<LayoutModule>? LayoutModules;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        LayoutModules = await LayoutService.GetLayoutModulesAsync(Principal, LayoutId, PersonId);
    }

    string WaybillsHref(LayoutModule it) => $"reports/waybills/layout/{it.LayoutParticipant.LayoutId}/station/{it.LayoutStation.StationId}";

}
