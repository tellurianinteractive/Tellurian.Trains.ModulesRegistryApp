@inject IStringLocalizer<App> Localizer
@inject PropertyService PropertyService
@inject StationService StationService
@inject StationTrackService StationTrackService

@if (Tracks is null)
{
    <ActionMessage Label="GettingContent" AlertType="Wait" />
}
else
{
    <h3 class="mt-3">@Localizer["Tracks"]</h3>
    <div class="col-12">
        <AppButton Label="Add" ObjectName="Track" OnClickCallback="AddAsync" />
    </div>
    <TableTemplate Items="Tracks.OrderBy(st => st.DisplayOrder)" SaveAsync="SaveAsync" DeleteAsync="DeleteAsync" EditColspan="7" RowStyle="RowStyle" >
        <TableHeader>
            <th>@Localizer["TrackNumber"]</th>
            <th>@Localizer["Direction"]</th>
            <th>@Localizer["MaxTrainLength"]</th>
            <th>@Localizer["PlatformLength"]</th>
            <th>@Localizer["SpeedLimit"]</th>
            <th>@Localizer["Usage"]</th>
        </TableHeader>
        <RowTemplate Context="item">
            <td>@item.Designation</td>
            <td>@item.DirectionText(EnumExtensions.StationTrackDirectionListboxItems())</td>
            <td>@item.MaxTrainLengthText()</td>
            <td>@item.PlatformLengthText()</td>
            <td>@item.SpeedLimitText()</td>
            <td>@item.UsageText()</td>
        </RowTemplate>
        <RowEditTemplate Context="track">
            <div class="row g-3" style="border-bottom: 1px solid gray; padding-bottom: 3px">
                <AppInputText Width="2" Label="TrackNumber" @bind-Value="track.Designation" />
                <AppInputNumber Width="2" Label="DisplayOrder" TValue="short" @bind-Value="track.DisplayOrder" />
                <AppInputSelect Width="2" Label="Direction" @bind-Value="track.DirectionId" Items="EnumExtensions.StationTrackDirectionListboxItems()" />
                <AppInputNumber Width="2" Label="MaxTrainLength" TValue="double" @bind-Value="track.MaxTrainLength" Unit="m" Step="0.1" />
                <AppInputNumber Width="2" Label="PlatformLength" TValue="double?" @bind-Value="track.PlatformLength" Unit="m" Step="0.1" />
                <AppInputNumber Width="2" Label="SpeedLimit" TValue="short?" @bind-Value="track.SpeedLimit" Unit="km/h" Step="5" />

                <AppInputText Width="4" Label="Usage" @bind-Value="track.UsageNote" />
                <AppInputFill Width="8" />

                <AppInputCheck Width="2" Label="IsThroughTrack" @bind-Value="track.IsThroughTrack" />
                <AppInputCheck Width="2" Label="IsSiding" @bind-Value="track.IsSiding" />
                <AppInputFill Width="6" />
            </div>
        </RowEditTemplate>
    </TableTemplate>
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public Station? Station { get; set; }

    ClaimsPrincipal? Principal;
    IEnumerable<StationTrack>? Tracks => Station?.StationTracks;

    protected override async Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (Station?.Id > 0) Station = await StationService.FindByIdAsync(Principal, Station.Id);
    }

    async Task AddAsync()
    {
        if (Station is not null)
        {
            var track = Station.CreateTrack();
            var result = await StationTrackService.SaveOrUpdateAsync(Principal, track);
            await UpdateStation();
        }
    }

    async Task SaveAsync(StationTrack track)
    {
        var result = await StationTrackService.SaveOrUpdateAsync(Principal, track);
        await UpdateStation();

    }

    async Task DeleteAsync(StationTrack track)
    {
        var result = await StationTrackService.DeleteAsync(Principal, track);
        await UpdateStation();
    }

    async Task UpdateStation()
    {
        if (Station?.Id > 0) Station = await StationService.FindByIdAsync(Principal, Station.Id);
    }

    string RowStyle(StationTrack track) => $"background-color: {track.BackgroundColor()}";
}