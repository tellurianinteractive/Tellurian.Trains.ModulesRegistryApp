@typeparam TItem

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@if (Items is null)
{
    <ActionMessage Label="GettingData" AlertType="Wait" />
}
else if (Items.Count() == 0 && !HideNoRecordsToDisplay)
{
    <ActionMessage Label="NoRecordsToDisplay" />
}
else
{
    <table class="table table-sm">
        <thead>
            <tr>
                @TableHeader
                @if (RowEditTemplate is not null)
                {
                    <th>@Localizer["Actions"]</th>
                }
            </tr>
        </thead>
        <tbody>
            @if (RowTemplate is not null)
            {
                @foreach (var item in Items)
                {
                    var rowHeader = RowDividerHeading?.Invoke(item);
                    @if(rowHeader.HasValue())
                    {
                        <tr>
                            <td colspan="5"><h3>@rowHeader</h3></td>
                        </tr>
                    }
                    @if (!IsEditItem(item) || ShowRowTemplateWhenEditing)
                    {
                        <tr @key="@ItemKey(item)" style="@ItemStyle(item)">
                            @RowTemplate(item)
                            <td>
                                @if (RowEditTemplate is not null)
                                {
                                    <AppButton Label="Edit" OnClickCallback="(() => Edit(item))" IsDisabled="IsReadOnly" />
                                }
                                @if (ShowDeleteButton)
                                {
                                    <AppButton Label="Delete" OnClickCallback="(async () => await TryDeleteAsync(item))" IsDisabled="IsReadOnly" />
                                }
                            </td>
                        </tr>
                    }
                    @if (RowEditTemplate is not null && IsEditItem(item))
                    {
                        <tr @key="@EditItemKey(item)" style="background-color: lightgoldenrodyellow">
                            <td colspan="@EditColspan">
                                @RowEditTemplate(item)
                                <br />
                                @if (SaveAsync is not null)
                                {
                                    <AppButton Label="Save" OnClickCallback="@(async() => await TrySaveAsync(item))" />
                                }
                                <AppButton Label="Close" OnClickCallback="OnClose" />
                            </td>
                        </tr>
                    }
                }
            }
        </tbody>
    </table>
}

@code {
    [Parameter] public RenderFragment? TableHeader { get; set; }
    [Parameter] public RenderFragment<TItem>? RowTemplate { get; set; }
    [Parameter] public RenderFragment<TItem>? RowEditTemplate { get; set; }
    [Parameter] public IEnumerable<TItem>? Items { get; set; }
    [Parameter] public bool HideNoRecordsToDisplay { get; set; }
    [Parameter] public Func<TItem, string>? Key { get; set; }
    [Parameter] public Func<TItem, string>? RowStyle { get; set; }
    [Parameter] public Func<TItem, string>? RowDividerHeading { get; set; }
    [Parameter] public int EditColspan { get; set; } = 2;
    [Parameter] public bool MayEdit { get; set; } = true;
    [Parameter] public bool ShowRowTemplateWhenEditing { get; set; }
    [Parameter] public Func<TItem, Task>? DeleteAsync { get; set; }
    [Parameter] public Func<TItem, Task>? SaveAsync { get; set; }


    bool ShowDeleteButton => DeleteAsync is not null;
    bool IsReadOnly => !MayEdit;
    bool CanSave => MayEdit;
    string ItemKey(TItem item) => Key is null ? item?.GetHashCode().ToString() ?? string.Empty : Key(item);
    string EditItemKey(TItem item) => ItemKey(item) + "E";
    string ItemStyle(TItem item) => RowStyle is null ? string.Empty : RowStyle(item);


    string? EditedKey = null;
    bool IsEditItem(TItem item) => EditItemKey(item) == EditedKey;

    void Edit(TItem item)
    {
        EditedKey = EditItemKey(item);
    }

    void OnClose()
    {
        EditedKey = null;
    }

    async Task TryDeleteAsync(TItem item)
    {
        if (DeleteAsync is not null)
        {
            await DeleteAsync(item);
        }
    }

    async Task TrySaveAsync(TItem item)
    {
        if (SaveAsync is not null)
        {
            await SaveAsync(item);
        }
    }
}