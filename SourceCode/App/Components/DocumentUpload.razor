@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject DocumentService DocumentService

@if (MayUpload)
{
    <div style="display:flex; flex-direction:row">
        <div class="col-md-3">
            <img src="@IconImageSrc" class="icon" /> @Heading
        </div>
        <div class="col-md-2">
            <button class="btn btn-secondary btn-sm" onclick="document.getElementById('@InputFileId').click()"><span class="@FontAwesome.Upload" /><span class="sm-hide">@Localizer["SelectFile"]</span> </button>
            <InputFile Id="@InputFileId" OnChange="SaveFileAsync" accept="@Accept" hidden />
            @if (DocumentId.HasValue)
            {
                <AppButton Label="Delete" OnClickCallback="DeleteFileAsync" OnClickParameter="DocumentId.Value" />
            }
        </div>
       
        <div class="col-md-4">
            @MaxSizeText
        </div>
    </div>
}
@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public string? FileExtension { get; set; }
    [Parameter] public object? DocumentedObject { get; set; }
    [Parameter] public string? Label { get; set; }
    [Parameter] public int? MaxFileSizeKb { get; set; }
    [Parameter] public Func<Task>? OnUpdatedAsync { get; set; }

    ClaimsPrincipal? Principal; 
    int? DocumentId;
    long MaxFileSize => (MaxFileSizeKb ?? 1024) * 1024;

    protected override async Task OnParametersSetAsync()
    {
        var owningObject = DocumentService.DocumentedObject(DocumentedObject, FileExtension);
        DocumentId = owningObject.DocumentId;
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
    }

    async Task SaveFileAsync(InputFileChangeEventArgs e)
    {
        if (IsFileSizeWithinLimits(e.File))
        {
            var principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
            var result = await DocumentService.SaveAsync(principal, e.File, DocumentedObject, FileExtension, MaxFileSize);
            DocumentId = result.Entity?.Id;
            if (OnUpdatedAsync is not null) await OnUpdatedAsync();
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, string.Format(Localizer["UploadOfFile"], e.File.Name));
        }
        else
        {
            ToastService.ShowWarning(string.Format(LanguageExtensions.CurrentCulture, Localizer["FileExceedsMaxSizeOf"].Value, MaxFileSize));
        }
    }

    async Task DeleteFileAsync(int documentId)
    {
        var result = await DocumentService.DeleteAsync(Principal, documentId);
        ToastService.ShowSuccessOrFailure(Localizer, result.Count, Localizer["FileDeleted"]);
        StateHasChanged();
    }

    string IconImageSrc => $"/images/{FileExtension}.png";
    string InputFileId => $"{Label}{FileExtension}";
    bool MayUpload => FileExtension.IsPermittedFileExtension() && DocumentedObject.IsValidDocumentObject();
    string Accept => $".{FileExtension}";
    string Heading => DocumentId.HasValue ? $"{Localizer["Update"]} {LabelWithFileExtension.ToLowerInvariant()}" : $"{Localizer["Add"]} {LabelWithFileExtension.ToLowerInvariant()}";
    string LabelWithFileExtension => string.IsNullOrWhiteSpace(Label) ? $"{FileExtension}" : $"{Localizer[Label]} ({FileExtension})";
    string MaxSizeText => string.Format(LanguageExtensions.CurrentCulture, Localizer.Value("MaxUploadFileSizeKb"), MaxFileSizeKb);

    bool IsFileSizeWithinLimits(IBrowserFile file) => MaxFileSizeKb.HasValue && file.Size <= MaxFileSize;

}