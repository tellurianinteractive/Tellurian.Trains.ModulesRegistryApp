@inject IStringLocalizer<App> Localizer

@if (Stations is not null && MayEdit)
{
    if (AnyModules)
    {
        <div>
            <AppButton Label="Add" Href="@StationEditHref(0)" />
            <AppButton Label="Modules" IconName="@FontAwesome.Modules" Href="@ModulesHref()" />
        </div>
    }
    else
    {
        <div class="col-md-8" style="background-color:lightgoldenrodyellow;padding:1px 0px 1px 0px; margin: 3px 0px 3px 0px">
            <span class="fa fa-exclamation-circle" /> @Localizer["AddModuleFirst"]
        </div>
    }
}
<TableTemplate Items="Stations?.OrderBy(s => s.FullName)" >
    <TableHeader>
        <th>@Localizer["Name"]</th>
        <th>@Localizer["Signature"]</th>
        <th style="text-align: center">@Localizer["OwnedPercent"]</th>
        <th align="center">@Localizer["Status"]</th>
        <th align="center">@Localizer["IsTerminus"]</th>
        <th align="center">@Localizer["IsShadowStation"]</th>
        <th align="center">@Localizer["Documents"]</th>
        <th>@Localizer["Actions"]</th>

    </TableHeader>
    <RowTemplate Context="station">
        <td>@Name(station)</td>
        <td>@station.Signature</td>
        <td align="center">@station.PrimaryModule.ModuleOwnership(OwnershipRef).OwnedShareAndPercentage(Localizer)</td>
        <td align="center">@station.PrimaryModule.StatusIcon()</td>
        <td align="center">@station.IsTerminus.AsYesOrNo()</td>
        <td align="center">@station.IsShadow.AsYesOrNo()</td>
        <td align="center">
            <DocumentLink DocumentId="station.PdfInstructionId" FileExtension="pdf" />
        </td>
        <td>
            <AppButton Label="View" Href="@StationViewHref(station.Id)" />
            <AppButton Label="Edit" Href="@StationEditHref(station.Id)" IsHidden="@(!MayEdit)" />
            <AppButton Label="Delete" Href="@StationDeleteHref(station.Id)" IsHidden="@(!MayEdit)" />
            @if (station.HasCargoCustomers)
            {
                <AppButton Label="FreightCustomers" Href="@CargoCustomersHref(station.Id)" IconName="@FontAwesome.Customer" />
            }
        </td>
    </RowTemplate>
</TableTemplate>


@code {
    [Parameter] public IEnumerable<Station>? Stations { get; set; }
    [Parameter] public bool MayEdit { get; set; }
    [Parameter] public bool AnyModules { get; set; }
    [Parameter] public int OwningPersonId { get; set; }
    [Parameter] public int OwningGroupId { get; set; }

    ModuleOwnershipRef OwnershipRef = ModuleOwnershipRef.None;

    protected override void OnParametersSet()
    {
        OwnershipRef = ModuleOwnershipRef.Any(null, OwningPersonId, OwningGroupId);
    }

    string StationViewHref(int id) => $"Stations/{id}/View";
    string StationEditHref(int id) => OwnershipRef.Href("Stations", id, "Edit");
    string StationDeleteHref(int id) => $"Stations/{id}/Delete";
    string CargoCustomersHref(int id) => OwnershipRef.Href("Stations", id, "Customers");
    string ModulesHref() => OwnershipRef.Href("Modules");

    MarkupString Name(Station station) => new(
    station.HasConfigurationLabel() ? $"{station.FullName} <span class=\"fa fa-ruler\" /> {station.ConfigurationLabel()}" :
    station.HasPackageLabel() ? $"{station.FullName} <span class=\"fa fa-truck-loading\" /> {station.PackageLabel()}" :
    station.FullName);

}
