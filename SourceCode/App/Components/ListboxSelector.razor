@inject IStringLocalizer<App> Localizer
@inject ILocalStorageService LocalStorage

@if (IsVisible && Items is not null)
{

    <div class="form-group" style="padding-right: @PaddingRight">
        <select class="form-control-sm " id="selectid" @bind="Id" @onselect="OnSelectedItem">
            <option value="0">@Label</option>
            @foreach (var item in Items)
            {
                <option selected="@Selected(item)" value="@item.Id">@item.Description</option>
            }
        </select>
        <AppButton Label="Ok" OnClickCallback="OnSelectedItem" />
        @if (Inline)
        {
        }
        else
        {
            <hr />
        }
    </div>
}

@code {
    [Parameter] public string? ItemType { get; set; }
    [Parameter] public EventCallback<int> OnSelected { get; set; }
    [Parameter] public IEnumerable<ListboxItem>? Items { get; set; }
    [Parameter] public bool IsVisible { get; set; }
    [Parameter] public int SelectedId { get; set; }
    [Parameter] public bool Inline { get; set; }
    [Parameter] public string? LocalStorageKey { get; set; }

    int Id { get; set; }
    string? StoredId = null;

    protected override async void OnParametersSet()
    {
        Id = SelectedId;
        if (LocalStorageKey.HasValue())
        {
            StoredId = await LocalStorage.GetItemAsStringAsync(LocalStorageKey);
            if (StoredId.HasValue()) 
                if (int.TryParse(StoredId, out int id)) Id = id;
        }
    }

    private async Task OnSelectedItem()
    {
        SelectedId = Id;
        if (LocalStorageKey.HasValue())
        {
            await LocalStorage.SetItemAsStringAsync(LocalStorageKey, Id.ToString());
        }
        await OnSelected.InvokeAsync(Id);
    }

    private string Label => $"{Localizer["Select"]} {LocalizedItemType.ToLowerInvariant()}";
    private string LocalizedItemType => ItemType is null ? string.Empty : Localizer[ItemType].Value;
    string? Selected(ListboxItem item) => Items is not null && (item.Id == Id) ? "selected" : null;
    string PaddingRight => Inline ? "20px" : "";

}
