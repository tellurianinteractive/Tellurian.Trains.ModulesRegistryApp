@inject IStringLocalizer<App> Localizer

@if (Customer is null)
{

}
else
{
    <div style="display:flex; flex-direction:row; justify-content: space-between; align-items:end">
        @if (MayEdit)
        {
            <div style="font-size:18pt; font-weight: bold">
                @Customer.CustomerName
                @if (Customer.Comment.HasValue())
                {
                    <span style="font-size:12pt; font-weight: normal">
                        ,
                        @Customer.Comment
                    </span>
                }

            </div>
            <div style="padding-left: 20pt">
                <AppButton Label="ManageCargoFlow" Href="@FreightCustomerHref(Customer)" IconName="@FontAwesome.Cargo" AlwaysShowLabel=true />
                <AppButton Label="ManageWaybills" Href="@FreightCustomerWaybillsHref(Customer)" IconName="@FontAwesome.Waybills" AlwaysShowLabel=true />
            </div>
        }
    </div>

    <TableTemplate Items="Customer.Cargos.OrderBy(scc => scc.DirectionId)" RowStyle="RowStyle">
        <TableHeader>
            <th>@Localizer["CargoType"]</th>
            <th>@Localizer["PackagingUnit"]</th>
            <th align="center">@Localizer["Class"]</th>
            <th align="center">@Localizer["Place"]</th>
            <th align="center">@Localizer["Days"]</th>
            <th align="center">@Localizer["Direction"]</th>
            <th>@Localizer["Quantity"]</th>
            <th>@Localizer["Finished"]</th>
            <th>@Localizer["OperatingPeriod"]</th>
        </TableHeader>
        <RowTemplate Context="item">
            <td width="15%">@item.CargoTypeName(CargoTypeItems)</td>
            <td width="10%">@item.PackagingUnit(PackagingUnitItems)</td>
            <td width="10%">@item.WagonClasses()</td>
            <td width="6%" align="center" style="color: @item.TrackOrAreaForeColor(); background-color: @item.TrackOrAreaBackColour()">@item.TrackOrArea()</td>
            <td width="6%" align="center">@item.OperatingDays(OperatingDayItems)</td>
            <td width="6%" align="center">@item.CargoDirection(DirectionItems)</td>
            <td width="12%">@item.Quantity @item.QuantityUnit(QuantityUnitItems)</td>
            <td width="20%">@item.ReadyLoadingOrUnloading(Localizer, ReadyTimeItems)</td>
            <td width="10%">@((item.FromYear ?? item.StationCustomer.OpenedYear, item.UptoYear ?? item.StationCustomer.ClosedYear).AsPeriod())</td>
        </RowTemplate>
    </TableTemplate>

}

@code {
    [Parameter] public StationCustomer? Customer { get; set; }
    [Parameter] public IEnumerable<ListboxItem>? CargoTypeItems { get; set; }
    [Parameter] public IEnumerable<ListboxItem>? DirectionItems { get; set; }
    [Parameter] public IEnumerable<ListboxItem>? QuantityUnitItems { get; set; }
    [Parameter] public IEnumerable<ListboxItem>? OperatingDayItems { get; set; }
    [Parameter] public IEnumerable<ListboxItem>? ReadyTimeItems { get; set; }
    [Parameter] public IEnumerable<ListboxItem>? PackagingUnitItems { get; set; }

    [Parameter] public bool MayEdit { get; set; }


    string FreightCustomerHref(StationCustomer? it) => it is null ? string.Empty : $"/Stations/{it.StationId}/Customers/{it.Id}/Edit";
    string FreightCustomerWaybillsHref(StationCustomer? it) => it is null ? string.Empty : $"/Stations/{it.StationId}/Customers/{it.Id}/Waybills";

    string RowStyle(StationCustomerCargo item) => item.RowStyle();
    
}

