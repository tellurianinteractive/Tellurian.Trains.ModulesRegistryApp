@using System.Diagnostics.CodeAnalysis;
@using System.Globalization;

@inherits AppInputBase<int?>
@inject IStringLocalizer<App> Localizer

<div class="@BootstrapWrapperCss">
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label class="form-control-label" for="@Label">@LabelText(Localizer)</label>
    }
    <select disabled=@IsDisabled class="form-select @CssClass" id="@Label" @bind="CurrentValueAsString">
        @if (ShowNoneOption)
        {
            <option value="">@NoneOption</option>
        }
        @if (Items is not null)
        {
            foreach (var item in Items)
            {
                if (item.Id == CurrentValue)
                {
                    <option selected value="@item.Id">@item.Description</option>
                }
                else
                {
                    <option value="@item.Id">@item.Description</option>
                }
            }
        }
    </select>
    @if (ValidationFor is not null)
    {
        <div class="form-control-validation">
            <ValidationMessage For="@ValidationFor" />
        </div>
    }
</div>

@code {
    [Parameter] public IEnumerable<ListboxItem>? Items { get; set; }
    [Parameter] public bool ShowNoneOption { get; set; }
    [Parameter] public Action<int?>? OnSelected { get; set; }

    string NoneOption => Localizer["NotApplicable"].Value;
    string BootstrapWrapperCss => Width.HasValue ? $"col-md-{Width}" : "col-md-4";

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out int? result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (string.IsNullOrWhiteSpace(value))
        {
            result = null;
            validationErrorMessage = null;
            OnSelected?.Invoke(result);
            return true;

        }
        else if (int.TryParse(value, NumberStyles.Integer, CultureInfo.InvariantCulture, out var parsedValue))
        {
            result = parsedValue;
            validationErrorMessage = null;
            OnSelected?.Invoke(result);
            return true;

        }
        else
        {
            result = 0;
            validationErrorMessage = Localizer["NotANumber"].Value;
            return false;
        }
    }
}
