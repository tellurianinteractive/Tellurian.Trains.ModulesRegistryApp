@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime

<span class="noprint">

    <span style="margin-left: 4px; display: @Display">
        @if (Href.HasValue())
        {
            @if (OpenInNewTab)
            {
                <button type="button " class="@ButtonClass" disabled="@Disabled" title="@TitleText" @onclick="@NavigateToNewTab"><span class="@IconClass" /><span class="@HideLabelCss">&nbsp;@LabelText&nbsp;@ObjectNameLocalized</span></button>
            }
            else
            {
                <a class="@ButtonClass" style="@DisablePointerEvents" href="@Href" title="@TitleText"><span class="@IconClass" /><span class="@HideLabelCss">&nbsp;@LabelText&nbsp;@ObjectNameLocalized</span></a>
            }
        }
        else if (IsSubmit)
        {
            <button type="submit" class="@ButtonClass" disabled="@Disabled" title="@TitleText"><span class="@IconClass" /><span class="@HideLabelCss">&nbsp;@LabelText&nbsp;@ObjectNameLocalized</span></button>
        }
        else
        {
            <button type="button" class="@ButtonClass" disabled="@Disabled" title="@TitleText" @onclick="@(() => OnClickCallback.InvokeAsync(OnClickParameter))"><span class="@IconClass" /><span class="@HideLabelCss">&nbsp;@LabelText&nbsp;@ObjectNameLocalized</span></button>
        }
    </span>
</span>


@code {
    [Parameter] public string Label { get; set; } = "Button";
    [Parameter] public string? ObjectName { get; set; }
    [Parameter] public string? Href { get; set; }
    [Parameter] public EventCallback<int> OnClickCallback { get; set; }
    [Parameter] public bool IsDisabled { get; set; }
    [Parameter] public string? Type { get; set; }
    [Parameter] public string IconName { get; set; } = string.Empty;
    [Parameter] public bool IsSubmit { get; set; }
    [Parameter] public int OnClickParameter { get; set; }
    [Parameter] public bool OpenInNewTab { get; set; }
    [Parameter] public bool IsHidden { get; set; }
    [Parameter] public bool AlwaysShowLabel { get; set; }
    [Parameter] public string? Title { get; set; }

        async Task NavigateToNewTab()
    {
        await JSRuntime.InvokeAsync<object>("open", Href, "_blank");
    }


    string ButtonClassType => Type.HasValue() ? Type.ToLowerInvariant() : Labels?.First().ToLowerInvariant() switch
    {
        "add" => "primary",
        "edit" => "primary",
        "ok" => "primary",
        "upload" => "primary",
        "delete" => "danger",
        "confirmdelete" => "danger",
        "remove" => "danger",
        "save" => "primary",
        "saveall" => "primary",
        "update" => "primary",
        "manage" => "primary",
        _ => "info"
    };
    string LabelText => Labels is not null ? String.Join(' ', Labels.Select(l => Localizer[l])) : string.Empty;
    string TitleText => Title.HasValue() ? Localizer[Title] : LabelText;
    string[]? Labels => Label.HasValue() ? Label.Split("-") : Type.HasValue() ? Type.AsArray() : "Button".AsArray();
    string LabelOrType => Label ?? Type ?? "Button";
    string? DisablePointerEvents => IsDisabled ? "pointer-events: none" : null;
    string? Disabled => IsDisabled ? "disabled" : null;
    string ButtonClass => $"btn btn-sm btn-{ButtonClassType}";

    string IconClass =>
        IconName.StartsWith("fa ") ? IconName : 
        FontAwesome.ButtonIcons.ContainsKey(Label) ? FontAwesome.ButtonIcons[Label] :
        FontAwesome.ButtonIcons.ContainsKey(IconName) ? FontAwesome.ButtonIcons[IconName] :
        FontAwesome.Info;

    string ObjectNameLocalized
    {
        get
        {
            if (ObjectName.HasNoValue()) return string.Empty;
            var localizedText = Localizer[ObjectName].ToString();
            if (localizedText.HasValue()) return localizedText;
            return ObjectName;
        }
    }

    string Display => IsHidden ? "none" : "inline-block";
    string HideLabelCss => AlwaysShowLabel ? "" : "sm-hide";

}
