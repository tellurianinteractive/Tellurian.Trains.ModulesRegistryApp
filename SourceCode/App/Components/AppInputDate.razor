@using System.Diagnostics.CodeAnalysis;
@using System.Globalization;

@inherits AppInputBase<DateTime>
@inject IStringLocalizer<App> Localizer

<div class="@BootstrapWrapperCss">
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label class="form-control-label text-end" for="@Label">@LabelText(Localizer)</label>
    }
    @if (ShowTime)
    {
        <input disabled=@IsDisabled type="datetime-local" class="form-control text-end @CssClass" id="@Label" @bind="@CurrentValue" @onfocusout="OnChange" />
    }
    else
    {
        <input disabled=@IsDisabled type="date" class="form-control text-end @CssClass" id="@Label" @bind="@CurrentValue" @onfocusout="OnChange" />        
    }
    @if (ValidationFor is not null)
    {
        <div class="form-control-validation">
            <ValidationMessage For="@ValidationFor" />
        </div>
    }
</div>

@code {
    [Parameter] public bool ShowTime { get; set; }

    string BootstrapWrapperCss => Width.HasValue ? $"col-md-{Width}" : "col-md-4";

    protected override void OnInitialized()
    {
        if (!ShowTime) CurrentValue = CurrentValue.Date;
    }

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out DateTime result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        if (DateTime.TryParse(value, LanguageExtensions.CurrentCulture, DateTimeStyles.AssumeLocal, out var maybeDate))
        {
            result = ShowTime ? maybeDate : maybeDate.Date;
            validationErrorMessage = "";
            return true;
        }
        else
        {
            result = default;
            validationErrorMessage = Localizer["NotAValidDate"].ToString();
            return false;
        }
    }
}
