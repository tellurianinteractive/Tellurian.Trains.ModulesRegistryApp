@using System.Diagnostics.CodeAnalysis;
@using System.Globalization;

@typeparam TValue
@inherits AppInputBase<TValue>
@inject IStringLocalizer<App> Localizer

<div class="@BootstrapWrapperCss">
    @if (!string.IsNullOrWhiteSpace(Label))
    {
        <label class="form-control-label text-end" for="@Label">@((MarkupString)LabelMarkup)</label>
    }
    <input type="number" class="form-control text-end @CssClass" id="@Label" @bind="@CurrentValue" step="@NumberStep" disabled="@IsDisabled" @onfocusout="OnChangedValue" />
    @if (ValidationFor is not null)
    {
        <div class="form-control-validation">
            <ValidationMessage For="@ValidationFor" />
        </div>
    }
</div>

@code {
    [Parameter] public string? Format { get; set; }
    [Parameter] public string? Step { get; set; }
    [Parameter] public string? Unit { get; set; }
    [Parameter] public EventCallback OnChangedValue { get; set; }

    protected override bool TryParseValueFromString(string? value, [MaybeNullWhen(false)] out TValue result, [NotNullWhen(false)] out string? validationErrorMessage)
    {
        var type = typeof(TValue);
        if (type is null)
        {
            result = default;
            validationErrorMessage = Localizer["UnsupportedValueType"].Value;
            return false;
        }

        else if (IsInt)
        {
            int.TryParse(value, NumberStyles.Integer, CultureInfo.InvariantCulture, out var parsedValue);
            result = (TValue)(object)parsedValue;
            validationErrorMessage = null;
            return true;
        }
        else if (IsDouble)
        {
            double.TryParse(value, NumberStyles.Float, CultureInfo.CurrentCulture, out var parsedValue);
            result = (TValue)(object)parsedValue;
            validationErrorMessage = null;
            return true;
        }
        else if (IsShort)
        {
            short.TryParse(value, NumberStyles.Integer, CultureInfo.InvariantCulture, out var parsedValue);
            result = (TValue)(object)parsedValue;
            validationErrorMessage = null;
            return true;
        }
        else if (IsDecimal)
        {;
            decimal.TryParse(value, NumberStyles.Float, CultureInfo.CurrentCulture, out var parsedValue);
            result = (TValue)(object)parsedValue;
            validationErrorMessage = null;
            return true;
        }
        else throw new InvalidOperationException($"{GetType()} does not support the type '{typeof(TValue)}'.");
    }

    protected override string FormatValueAsString(TValue? value)
    {
        if (value is null) return string.Empty;
        if (Format is null) return value.ToString() ?? string.Empty;
        if (Unit is null) return string.Format($"{{0:{Format}}}", value);
        return string.Format($"{{0:{Format}}} {{1}}", value, Unit);
    }

    string BootstrapWrapperCss => Width.HasValue ? $"col-md-{Width}" : "col-md-4";
    string NumberStep => Step is null ? "1" : CurrentValue is double ? ".1" : Step;
    string LabelMarkup => string.IsNullOrWhiteSpace(Label) ? string.Empty : string.IsNullOrWhiteSpace(Unit) ? LabelText(Localizer) : $"{LabelText(Localizer)}&nbsp;({Unit})";

    private bool IsInt => typeof(TValue) == typeof(int) || typeof(TValue) == typeof(int?);
    private bool IsDouble => typeof(TValue) == typeof(double) || typeof(TValue) == typeof(double?);
    private bool IsShort => typeof(TValue) == typeof(short) || typeof(TValue) == typeof(short?);
    private bool IsDecimal => typeof(TValue) == typeof(decimal) || typeof(TValue) == typeof(decimal?);

}
