@page "/Groups/{id:int}/Stations"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer

@inject StationService StationService
@inject GroupService GroupService
@inject ModuleService ModuleService

<PageHeading ObjectName="Stations" Context="Owner" IconClass="@FontAwesome.Station" PageAction="PageAction.List" />

<StationsList Stations="OwnedStations" MayEdit="MayEdit" OwningGroupId="Id" AnyModules="AnyModules" />

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }

    ClaimsPrincipal? Principal;
    IEnumerable<Station>? OwnedStations;
    Group? Owner;
    bool IsGroupDataAdministrator;
    bool AnyModules;

    protected async override Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Owner = await GroupService.FindByIdAsync(Principal, Id);
        IsGroupDataAdministrator = await GroupService.IsGroupDataAdministratorAsync(Principal, Id, Owner?.CountryId);
        OwnedStations = await StationService.GetAllAsync(Principal, OwnerRef);
        AnyModules = await ModuleService.HasAnyNonStationAsync(Principal, ModuleOwnershipRef.Group(Id));
    }

    bool MayEdit => IsGroupDataAdministrator;
    ModuleOwnershipRef OwnerRef => ModuleOwnershipRef.Group(Id);
}
