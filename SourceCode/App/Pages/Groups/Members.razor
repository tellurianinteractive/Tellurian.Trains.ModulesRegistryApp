@page "/Groups/{groupid:int}/Members"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject GroupService GroupService
@inject CountryService CountryService
@inject MeetingService MeetingService

<PageHeading Label="MembersIn" Context="Group" IconClass="@FontAwesome.Group" PageAction="PageAction.List" />

@if (IsGroupAdministrator && Group.Id > 0)
{
    <AppButton Label="Add" Href="@MemberAddHref(Group.Id)" ></AppButton>
    @if (Principal is not null)
    {
        <MailToButton Sender="Principal.Sender()" Recipients="@Group.GroupMembers.MailHolders()" Subject="@Group.Name()"/>
    }
}

<TableTemplate Items="Group.GroupMembers.OrderBy(gm => gm.Person.Name())">
    <TableHeader>
        <th>@Localizer["Name"]</th>
        <th align="center">@Localizer["IsGroupAdministrator"]</th>
        <th align="center">@Localizer["IsDataAdministrator"]</th>
        <th align="center">@Localizer["IsMeetingAdministrator"]</th>
        <th align="center">@Localizer["MayBorrowGroupsModules"]</th>
        <th align="center">@Localizer["MemberMayBorrowMyModules"]</th>
        <th align="center">@Localizer["Status"]</th>
        <th>@Localizer["Actions"]</th>

    </TableHeader>
    <RowTemplate Context="member">
        <td>@member.Person.Name()</td>
        <td align="center">@member.IsGroupAdministrator.AsYesOrNo()</td>
        <td align="center">@member.IsDataAdministrator.AsYesOrNo()</td>
        <td align="center">@member.IsMeetingAdministrator.AsYesOrNo()</td>
        <td align="center">@member.MayBorrowGroupsModules.AsYesOrNo()</td>
        <td align="center">@member.MemberMayBorrowMyModules.AsYesOrNo()</td>
        <td align="center">@member.Person.StatusIcon()</td>
        <td style="white-space: nowrap !important;">
            <AppButton Label="Modules" Href="@ModulesHref(member)"  />
            <AppButton Label="Stations" Href="@StationsHref(member)" />
            @if (IsGroupAdministrator)
            {
                <AppButton Label="Edit" Href="@MemberEditHref(member)" />
                <AppButton Label="Remove" OnClickCallback="(async () => await RemoveMember(member.Id))" />
                @if (member.Person.MayBeInvited())
                {
                    <AppButton Label="Invite" Href="@InviteHref(member)"  />
                }
            }
        </td>
    </RowTemplate>
</TableTemplate>


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int? GroupId { get; set; }

    private ClaimsPrincipal? Principal;
    private Group Group = new Group();
    private bool IsGroupAdministrator;
    private ModuleOwnershipRef OwnershipRef = ModuleOwnershipRef.None;


    protected async override Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (GroupId.IsSet())
        {
            Group = await GroupService.FindByIdAsync(Principal, GroupId.Value) ?? new Group();
            IsGroupAdministrator = await GroupService.IsGroupMemberAdministratorAsync(Principal, GroupId.Value, Group?.CountryId);
        }
    }

    async Task RemoveMember(int membershipId)
    {
        if (membershipId > 0)
        {
            var result = await GroupService.RemoveMemberAsync(Principal, membershipId);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
            if (GroupId.IsSet()) Group = await GroupService.FindByIdAsync(Principal, GroupId.Value) ?? new Group();
        }
    }

    string ModulesHref(GroupMember member) => $"Persons/{member.PersonId}/Modules/InGroup/{member.GroupId}";
    string StationsHref(GroupMember member) => $"Persons/{member.PersonId}/Stations/InGroup/{member.GroupId}";
    string MemberEditHref(GroupMember member) => $"Groups/{member.GroupId}/Members/{member.Id}/edit";
    string MemberAddHref(int groupId) => $"groups/{groupId}/members/add";
    string InviteHref(GroupMember member) => $"Persons/{member.PersonId}/Invite";

}
