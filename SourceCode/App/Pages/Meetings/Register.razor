@page "/Meetings/{MeetingId:int}/Register"
@page "/Meetings/{MeetingId:int}/Edit/{PersonId:int}"

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject ITimeProvider TimeProvider

@inject MeetingService MeetingService
@inject LayoutParticipantService LayoutParticipantService
@inject CountryService CountryService
@inject GroupService GroupService
@inject PersonService PersonService

<PageHeading Label="Registration" Context="Meeting" IconClass="@FontAwesome.Register" PageAction="PageAction.Unknown" HelpContext="RegisterParticipant" />

@if (Meeting is null)
{
    <ActionMessage Label="@Localizer["GettingData"]" />
}
else if (Meeting.IsNotPermittingRegistrations())
{
    <ActionMessage AlertType="Warning" Label="MeetingDoesAcceptRegistrations" />
}
else if (Meeting.IsNotYetOpenForRegistration(TimeProvider.LocalTime))
{
    <ActionMessage AlertType="Warning" Label="@MeetingOpensForRegistration(Meeting)" />
}
else
{
    <PrincipalContentView Principal="Principal" NotAuthenticatedContent="AttendToMeeting">
        <h4>
            @Meeting.ParticipationSummary()
        </h4>
        <hr />
        @if (IsAdministratorOrMeetingOrganiser)
        {
            <div class="noprint">
                <h3>@Localizer["SelectPersonToRegister"]</h3>
                <ListboxSelector ItemType="Country" OnSelected="OnSelectedCountry" Items="CountryItems" IsVisible="true" SelectedId="CountryId" LocalStorageKey="Register" />
                <ListboxSelector ItemType="Person" OnSelected="OnSelectedPerson" Items="PeopleItems" IsVisible=" true" SelectedId="PersonId" />
            </div>
        }

        @if (IsAdministratorOrMeetingOrganiser && Participant is null)
        {
            <div style="padding: 10px 0px">
                <MailToButton Recipients="Meeting.ParticipantsMails()" Sender="Principal!.Sender()" Subject="@Meeting.Name" />
                <MailCopyButton Recipients="Meeting.ParticipantsMails()" />

                @foreach (var layout in Meeting.Layouts.Where(l => l.IsRegistrationPermitted))
                {
                    <AppButton Href="@($"layouts/{layout.Id}/modules")" ObjectName="@(layout.DescriptionWithName())" Label="Participants" IconName="@FontAwesome.Layout" />
                }
            </div>

            <TableTemplate Items="Meeting.Participants.OrderBy(p => p.Person.FirstName).ThenBy(p => p.Person.LastName)">
                <TableHeader>
                    <th>@Localizer["Participant"]</th>
                    @if (Meeting.IsFremo())
                    {
                        <th>@Localizer["Member"]</th>
                    }
                    <th>@Localizer["City"]</th>
                    @if (HasParticipantsFromSeveralCountries)
                    {
                        <th>@Localizer["Country"]</th>
                    }
                    <th>@Localizer["Registered"]</th>
                    <th>@Localizer["Participates"]</th>
                    <th>@Localizer["Layouts"]</th>
                    <th class="noprint">@Localizer["Actions"]</th>
                </TableHeader>
                <RowTemplate Context="item">
                    <td style="@ParticipantStatusStyle(item)">@item.Person.Name() @item.Person.EmailIcon() @item.ApprovedIcon()</td>
                    @if (Meeting.IsFremo())
                    {
                        <td>@item.Person.FremoNumber()</td>
                    }
                    <td>@item.Person.CityName</td>
                    @if (HasParticipantsFromSeveralCountries)
                    {
                        <td><img src="@item.Person.Country.FlagSrc()"> @item.Person.Country.EnglishName.AsLocalized()</td>
                    }
                    <td>@item.RegistrationTime.ToString("g")</td>
                    <td>@item.Participates(Localizer)</td>
                    <td>@item.ParticipatesInLayouts(Localizer)</td>
                    <td class="noprint">
                        <AppButton Label="Edit" OnClickCallback="() =>OnSelectedPerson(item.PersonId)" />
                        @if (item.CancellationTime.HasValue)
                        {
                            <AppButton Label="Register" OnClickCallback="() =>OnReRegister(item.PersonId)" IconName="@FontAwesome.Register" />
                        }
                        else
                        {
                            <AppButton Label="Unregister" OnClickCallback="() =>OnCancelledParticipation(item.PersonId)" IconName="@FontAwesome.Unregister" />
                        }
                    </td>
                </RowTemplate>
            </TableTemplate>
        }

        @if (Participant?.Id > 0)
        {
            <h4>@Localizer["Registered"]</h4>
            @if (Participant.CancellationTime.HasValue)
            {
                <p style="color: red; font-weight: bold">@Localizer["Canceled"] @Participant.CancellationTime.Value.ToString("g")</p>
            }
            <ul>
                <li>@Localizer["Name"]: <strong>@Participant.Person.Name()</strong></li>
                <li>@Localizer["RegistrationTime"]: <strong>@Participant.RegistrationTime.ToString("g")</strong></li>
                <li>@Localizer["Participates"]: <strong>@Participant.Participates(Localizer)</strong> </li>
            </ul>
        }

        @if (Participant is not null && !Meeting.IsFullyRegistered())
        {
            <EditTemplate Item="Participant" OnValidSubmit="OnValidSubmit" ShowSaveButton="MayEdit(Participant)">
                <Inputs>
                    <h3>@Localizer["Days"]</h3>
                    <AppInputCheck Width="1" @bind-Value="Participant.ParticipateDay1" Label="@Meeting.Day(1).AsLocalized()" IsVisible="Meeting.DaysCount() > 0" />
                    <AppInputCheck Width="1" @bind-Value="Participant.ParticipateDay2" Label="@Meeting.Day(2).AsLocalized()" IsVisible="Meeting.DaysCount() > 1" />
                    <AppInputCheck Width="1" @bind-Value="Participant.ParticipateDay3" Label="@Meeting.Day(3).AsLocalized()" IsVisible="Meeting.DaysCount() > 2" />
                    <AppInputCheck Width="1" @bind-Value="Participant.ParticipateDay4" Label="@Meeting.Day(4).AsLocalized()" IsVisible="Meeting.DaysCount() > 3" />
                    <AppInputCheck Width="1" @bind-Value="Participant.ParticipateDay5" Label="@Meeting.Day(5).AsLocalized()" IsVisible="Meeting.DaysCount() > 4" />
                    <AppInputCheck Width="1" @bind-Value="Participant.ParticipateDay6" Label="@Meeting.Day(6).AsLocalized()" IsVisible="Meeting.DaysCount() > 4" />
                    <AppInputFill Width="@(12-Meeting.DaysCount())" />
                    <AppInputTimeOnly Width="2" @bind-Value="Participant.LatestArrivalTime" Label="@LatestArrivalTimeLabel(Participant)" />
                    <AppInputTimeOnly Width="2" @bind-Value="Participant.EarliestDepartureTime" Label="@EarliestDepartureTimeLabel(Participant)" />
                </Inputs>
            </EditTemplate>
        }
        @if (Participant?.Id > 0 && (IsAdministratorOrMeetingOrganiser || Meeting.PermitsRegistrations()))
        {
            <h4>@Localizer["SelectOrModifyLayoutParticipation"]</h4>
            <TableTemplate Items="@LayoutParticipation(Meeting.Layouts.Where(l => l.IsRegistrationPermitted), Participant)">
                <TableHeader>
                    <th width="15%">@Localizer["Layout"]</th>
                    <th>@Localizer["Organiser"]</th>
                    <th>@Localizer["Note"]</th>
                    <th width="400px">@Localizer["Actions"]</th>
                </TableHeader>
                <RowTemplate Context="item">
                    <td>@item.Layout.DescriptionWithName()</td>
                    <td>@item.Layout.OrganisingGroup?.FullName</td>
                    <td>
                        @if (item.Layout.IsClosedForRegistration(TimeProvider.LocalTime) || item.Layout.IsFullyRegistered())
                        {
                            <span style="color:red;">@Localizer["RegistrationClosed"]</span>
                        }
                    </td>
                    <td>
                        @if (IsAdministratorOrMeetingOrganiser || (item.Layout?.IsOpenForRegistration(TimeProvider.LocalTime) == true) && !item.Layout.IsFullyRegistered())
                        {
                            <AppButton IconName="@RegisterModulesIconName(item)" Label="@RegisterModulesLabel(item)" Href="@RegisterModulesHref(item)" />
                            <AppButton Label="Unregister" IconName="@FontAwesome.Cancel" Type="Danger" OnClickCallback="@(async () => await OnCancelLayoutParticipation(item))" />
                        }

                        @if (item.LayoutParticipant?.LayoutStations.Any() == true)
                        {
                            <AppButton Label="InternalWaybills" IconName="@FontAwesome.Waybills" Href="@($"layouts/{item.Layout?.Id}/waybills/{item.Participant.PersonId}")" />
                        }
                    </td>
                </RowTemplate>
            </TableTemplate>
        }
    </PrincipalContentView>
}


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int MeetingId { get; set; }
    [Parameter] public int PersonId { get; set; }

    ClaimsPrincipal? Principal;

    int CountryId;
    MeetingParticipant? Participant;
    Meeting? Meeting;
    IEnumerable<ListboxItem>? CountryItems;
    IEnumerable<ListboxItem>? PeopleItems;

    IEnumerable<LayoutParticipation> PersonsLayoutParticipation = LayoutParticipation(null, null);
    bool IsAdministratorOrMeetingOrganiser;
    bool HasParticipantsFromSeveralCountries;

    bool MayEdit(MeetingParticipant mp) => Meeting?.Id > 0 && (
        Principal.IsGlobalOrCountryAdministrator() ||
        IsAdministratorOrMeetingOrganiser ||
        (!mp.CancellationTime.HasValue && mp.PersonId == Principal.PersonId() && Meeting.IsOpenForRegistration(TimeProvider.Now.Date)));

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (MeetingId > 0)
        {
            Meeting = await MeetingService.FindByIdAsync(MeetingId);
            if (Meeting is not null)
            {
                HasParticipantsFromSeveralCountries = Meeting.HasParticipantsFromSeveralCountries();
                if (PersonId > 0 && (Principal.IsGlobalOrCountryAdministrator() || PersonId == Principal.PersonId()))
                {
                    await OnSelectedPerson(PersonId);
                }
                else
                {
                    IsAdministratorOrMeetingOrganiser = await MeetingService.IsAdministratorOrMeetingOrganiser(Principal, Meeting);
                    if (IsAdministratorOrMeetingOrganiser)
                    {
                        CountryItems = await CountryService.ListboxItemsAsync(Principal, IsAdministratorOrMeetingOrganiser);
                    }
                    else
                    {
                        await OnSelectedPerson(Principal.PersonId());
                    }
                }
            }
        }
    }

    async Task OnSelectedCountry(int countryId)
    {
        if (MeetingId > 0 && countryId > 0)
        {
            CountryId = countryId;
            PersonId = 0;
            PeopleItems = await PersonService.ListboxItemsAsync(Principal, countryId);
        }
    }

    async Task OnSelectedPerson(int personId)
    {
        if (Meeting is not null && personId > 0)
        {
            PersonId = personId;
            Participant = await MeetingService.FindParticipantAsync(Principal, MeetingId, personId);
            if (Participant is null)
            {
                Participant = Meeting.DefaultParticipant(personId);
            }
            else
            {
                PersonsLayoutParticipation = LayoutParticipation(Meeting?.Layouts, Participant);
            }
        }
    }

    async Task OnCancelledParticipation(int personId)
    {
        if (MeetingId > 0 && personId > 0)
        {
            PersonId = personId;
            Participant = await MeetingService.FindParticipantAsync(Principal, MeetingId, personId);
            if (Participant is null) return;
            await OnCancel(Participant.Id);
        }
    }

    async Task OnCancelLayoutParticipation(LayoutParticipation? participant)
    {
        if (participant is null) return;
        var result = await LayoutParticipantService.DeleteAsync(Principal, participant.LayoutParticipant?.Id);
        ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        await OnSelectedPerson(participant.Participant.PersonId);
    }


    async Task OnValidSubmit()
    {
        if (Meeting is not null && Participant is not null)
        {
            var personId = Participant.PersonId;
            Participant.CancellationTime = null;
            var result = await MeetingService.SaveAsync(Principal, Meeting, Participant);
            Meeting = await MeetingService.FindByIdAsync(MeetingId);
            Participant = await MeetingService.FindParticipantAsync(Principal, MeetingId, personId);
            PersonsLayoutParticipation = LayoutParticipation(Meeting?.Layouts, Participant);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
    }

    async Task OnCancel(int particpantId)
    {
        var result = await MeetingService.CancelMeetingParticipaction(Principal, particpantId);
        Participant = await MeetingService.FindParticipantAsync(Principal, particpantId);
        ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
    }

    async Task OnReRegister(int participantId)
    {
        if (MeetingId > 0 && participantId > 0)
        {
            var result = await MeetingService.ReRegisterMeetingParticipaction(Principal, participantId);
            Participant = await MeetingService.FindParticipantAsync(Principal, participantId);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
    }


    void OnParticipateInLayout(int layoutId)
    {
        if (Participant is null) return;
        var added = Meeting?.Layouts.SingleOrDefault(l => l.Id == layoutId);
        if (added is null) return;
        if (Participant.LayoutParticipations.Any(l => l.Id == layoutId)) return;
        LayoutParticipant layoutParticipant = new() { LayoutId = layoutId, MeetingParticipantId = Participant.Id, PersonId = Participant.PersonId };
        Participant.LayoutParticipations.Add(layoutParticipant);
        PersonsLayoutParticipation = LayoutParticipation(Meeting?.Layouts, Participant);
    }


    void OnCancelParticipateInLayout(int layoutId)
    {
        if (Participant is null) return;
        var removed = Participant.LayoutParticipations.SingleOrDefault(l => l.LayoutId == layoutId);
        if (removed is not null) Participant.LayoutParticipations.Remove(removed);
        PersonsLayoutParticipation = LayoutParticipation(Meeting?.Layouts, Participant);
    }


    static IEnumerable<LayoutParticipation> LayoutParticipation(IEnumerable<Layout>? meetingLayouts, MeetingParticipant? participant)
    {
        if (meetingLayouts is null || meetingLayouts.Count() == 0 || participant is null) return [];
        return meetingLayouts.Select(meetingLayout => new LayoutParticipation(meetingLayout, participant)).ToList();
    }

    string CancelParticipateButtonLabel(Layout layout) => $"{Localizer["Cancel"]} {layout.Description}";
    string ParticipateButtonLabel(Layout layout) => $"{Localizer["Participate"]} {layout.Description}";
    string RegisterModulesHref(LayoutParticipation it) => $"/MeetingParticipants/{it.Participant.Id}/Layouts/{it.Layout.Id}/RegisterModules";
    string RegisterModulesLabel(LayoutParticipation it) => it.IsParticipating ? Localizer["Edit"] : Localizer["Participate"];
    string RegisterModulesIconName(LayoutParticipation it) => it.IsParticipating ? FontAwesome.Edit : FontAwesome.Register;

    string ParticipantStatusStyle(MeetingParticipant? it) => it is null ? string.Empty : it.CancellationTime.HasValue ? "color: red; text-decoration: line-through;" : string.Empty;

    string LatestArrivalTimeLabel(MeetingParticipant? it) => $"LatestArrivalTime-{it.FirstParticipationDay()}";
    string EarliestDepartureTimeLabel(MeetingParticipant? it) => $"EarliestDepartureTime-{it.LastParticipationDay()}";
    string MeetingOpensForRegistration(Meeting? it) =>
        it is null ? string.Empty :
        string.Format(Localizer["MeetingOpensForRegistrationAtDate"], it.RegistrationOpensDate());

}
