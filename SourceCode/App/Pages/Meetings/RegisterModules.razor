@page "/MeetingParticipants/{MeetingParticipantId:int}/Layouts/{LayoutId:int}/RegisterModules"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject ITimeProvider TimeProvider

@inject MeetingService MeetingService
@inject LayoutService LayoutService
@inject LayoutParticipantService LayoutParticipantService
@inject CountryService CountryService
@inject GroupService GroupService
@inject ModuleService ModuleService

<PageHeading Label="RegisterModules" Context="Meeting" IconClass="@FontAwesome.Layout" PageAction="PageAction.List" HelpContext="RegisterModules" />
<div>
    <h2>@Localizer["Participant"]: @MeetingParticipant?.Person.Name()</h2>
</div>
@if (LayoutParticipant is null)
{
}
else
{
    @if (MeetingParticipant.MayRegisterModules()) { 
    <div style="margin-top: 12pt">
        @if (Layout is not null)
        {
            <div style="background-color: lightgoldenrodyellow">
                <h3>@Localizer["RegisteredModules"]</h3>

                
                <TableTemplate Items="ParticipantsRegisteredModules">
                    <TableHeader>
                        <th>@Localizer["Package"]</th>
                        <th>@Localizer["Module"]</th>
                        <th>@Localizer["Owner"]</th>
                        <th>@Localizer["RegistrationTime"]</th>
                        <th>@Localizer["Actions"]</th>
                    </TableHeader>
                    <RowTemplate Context="item">
                        <td>@item.Module.PackageName()</td>
                        <td>@item.Module.FullName</td>
                        <td>@item.Module.ModuleOwnerships.OwnerNames()</td>
                        <td>@item.RegisteredTime.ToString("g")</td>
                        <td>
                            @if (MayRemove)
                            {
                                <AppButton Label="Remove" OnClickCallback="(() => OnRemove(item.Id))" IconName="@FontAwesome.Modules" />
                            }
                            @if (item.HasCargoCustomers())
                            {
                                <AppButton Label="Waybills" Title="InternalWaybills" Href="@WaybillsHref(item)" />
                            }
                        </td>
                    </RowTemplate>
                </TableTemplate>
            </div>
            <h3>@Localizer["MyAvailableModules"]</h3>
            @if (AvailablePackages?.Any() == false)
            {
                <ActionMessage Label="NoModulesAvailable" AlertType="Info" />
            }
            else
            {
                <TableTemplate Items="AvailablePackages" Key="Key" HideNoRecordsToDisplay=true>
                    <TableHeader>
                        <th>@Localizer["Package"]</th>
                        <th>@Localizer["Owner"]</th>
                        <th>@Localizer["Modules"]</th>
                        <th>@Localizer["Actions"]</th>
                    </TableHeader>
                    <RowTemplate Context="item">
                        <td>@item.Name</td>
                        <td>@item.OwnerName</td>
                        <td>@item.ToString()</td>
                        <td>
                            <AppButton Label="Add" OnClickCallback="@(() => OnRegisterPackage(item.Id))" IsDisabled="!MeetingParticipant.MayRegisterModules()" />
                        </td>
                    </RowTemplate>
                </TableTemplate>
            }
            @if (BorrowablePackages?.Any() == true)
            {
                <h3>@Localizer["OtherAvailableModules"]</h3>
                <TableTemplate Items="BorrowablePackages" Key="Key" HideNoRecordsToDisplay=true>
                    <TableHeader>
                        <th>@Localizer["Package"]</th>
                        <th>@Localizer["Owner"]</th>
                        <th>@Localizer["Modules"]</th>
                        <th>@Localizer["Actions"]</th>
                    </TableHeader>
                    <RowTemplate Context="item">
                        <td>@item.Name</td>
                        <td>@item.OwnerName</td>
                        <td>@item.ToString()</td>
                        <td>
                            <AppButton Label="Add" OnClickCallback="@(() => OnRegisterPackage(item.Id))" IsDisabled="!MeetingParticipant.MayRegisterModules()" />
                        </td>
                    </RowTemplate>
                </TableTemplate>
            }
        }
        </div>
    }
    else
    {
        <ActionMessage AlertType="Warning" Label="You are not present long enough to be able to register modules" />
    }
}

@code {

    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int MeetingParticipantId { get; set; }
    [Parameter] public int LayoutId { get; set; }

    ClaimsPrincipal? Principal;

    Meeting? Meeting;
    Layout? Layout;
    MeetingParticipant? MeetingParticipant;
    LayoutParticipant? LayoutParticipant;
    ModuleOwnershipRef? OwnershipRef;

    IEnumerable<LayoutModule> ParticipantsRegisteredModules = Enumerable.Empty<LayoutModule>();
    IEnumerable<AvailableModule> ParticipantsAvailableModules = Enumerable.Empty<AvailableModule>();
    IEnumerable<AvailableModule> ParticipantsBorrowableModules = Enumerable.Empty<AvailableModule>();

    IEnumerable<ModulePackage>? AvailablePackages = Array.Empty<ModulePackage>();
    IEnumerable<ModulePackage>? BorrowablePackages = Array.Empty<ModulePackage>();

    bool MayRemove;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (MeetingParticipantId > 0)
        {
            MeetingParticipant = await MeetingService.FindParticipantAsync(Principal, MeetingParticipantId);
            if (MeetingParticipant is not null)
            {
                Meeting = await MeetingService.FindByIdWithLayoutsAsync(MeetingParticipant.MeetingId);
                MayRemove = MeetingParticipant.MayUnregisterModules(Principal, Meeting, TimeProvider);
                if (!MayRemove) MayRemove = await MeetingService.IsMeetingOrganiser(Principal, Meeting);
                if (Meeting is not null && LayoutId > 0)
                {
                    Layout = Meeting.Layouts.SingleOrDefault(l => l.Id == LayoutId);
                    LayoutParticipant = await LayoutParticipantService.GetByIdAsync(Principal, MeetingParticipant.Id, LayoutId);
                    if (LayoutParticipant is null && Layout is not null)
                    {
                        await RegisterParticipation(MeetingParticipant, Layout);
                    }
                    if (LayoutParticipant is not null)
                    {
                        OwnershipRef = ModuleOwnershipRef.Person(LayoutParticipant.PersonId);
                        await Update();
                    }
                }
            }
        }
    }

    async Task RegisterParticipation(MeetingParticipant? meetingParticipant, Layout? layout)
    {
        if (meetingParticipant is not null && layout is not null)
        {
            var participant = new LayoutParticipant { LayoutId = layout.Id, MeetingParticipantId = meetingParticipant.Id, PersonId = meetingParticipant.PersonId };
            var result = await LayoutParticipantService.SaveAsync(Principal, participant);
            LayoutParticipant = result.Entity;
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
    }

    async Task OnRegisterPackage(int packageId)
    {
        var package = AvailablePackages?.SingleOrDefault(p => p.Id == packageId);
        if (package is null) package = BorrowablePackages?.SingleOrDefault(p => p.Id == packageId);
        if (package is not null && Layout is not null && LayoutParticipant is not null)
        {
            var result = await LayoutService.AddPackageModulesAsync(Principal, LayoutParticipant.Id, package);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
            await Update();
        }
    }

    async Task OnRemove(int layoutModuleId)
    {
        if (Layout is not null && LayoutParticipant is not null)
        {
            var result = await LayoutService.RemoveModuleWithStationAsync(Principal, layoutModuleId);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
            await Update();
        }
    }

    async Task Update()
    {
        if (LayoutId > 0 && MeetingParticipant is not null)
        {
            ParticipantsRegisteredModules = await LayoutService.GetLayoutModulesAsync(Principal, LayoutId, MeetingParticipant.PersonId);
            ParticipantsAvailableModules = await LayoutService.GetsAvailableModules(Principal, LayoutId, MeetingParticipant.PersonId);
            ParticipantsBorrowableModules = await LayoutService.GetBorrowableModules(Principal, LayoutId, MeetingParticipant.PersonId);
            AvailablePackages = ParticipantsAvailableModules.AsModulePackages();
            BorrowablePackages = ParticipantsBorrowableModules.AsModulePackages();
        }
    }

    string Key(ModulePackage package) => package.Name;
    IEnumerable<Module> Available(IEnumerable<Module>? modules, int scaleId) => modules is null ? Array.Empty<Module>() : modules.Where(m => !m.IsUnavailable && m.ScaleId == scaleId && !AllRegisteredModuleIds.Contains(m.Id));
    IEnumerable<int> AllRegisteredModuleIds => ParticipantsRegisteredModules.Select(m => m.ModuleId);
    IEnumerable<ListboxItem> LayoutItems => Meeting is null ? Array.Empty<ListboxItem>() : Meeting.Layouts.Select(l => new ListboxItem(l.Id, l.DescriptionWithName())).ToList();
    string WaybillsHref(LayoutModule it) => $"reports/waybills/layout/{it.LayoutParticipant.LayoutId}/station/{it.LayoutStation.StationId}";

}
