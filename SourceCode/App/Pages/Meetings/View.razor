@page "/Meetings/{id:int}/View"

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject ITimeProvider TimeProvider

@inject MeetingService MeetingService
@inject GroupService GroupService

@if (Meeting is null)
{
    @if (IsLoaded)
    {
        <ActionMessage Label="NoRecordsToDisplay" AlertType="warning" />
    }
    else
    {
        <ActionMessage Label="LoadingRecords" AlertType="info" />
    }
}
else
{
    <h1><span class="@FontAwesome.Meeting" /> @Meeting.Name</h1>
    @if (Meeting.IsCancelled())
    {
        <h2 style="color: red">@Meeting.Status.MeetingStatus()</h2>
    }
    else if (Meeting.PermitsRegistrations())
    {
    }
    @Item("Venue", $"{Meeting.VenueName}: {Meeting.CityName}, {Meeting.OrganiserGroup.Country.EnglishName.AsLocalized()}")
    @Item("Duration", Meeting.Duration())
    @Item("Organiser", Meeting.Organiser())
    @if (!Meeting.IsCancelled())
    {
        @Item("Status", Meeting.Status.MeetingStatus())
        @if (Meeting.MayRegister(Principal, TimeProvider.Now.DateTime))
        {
            <div style="padding: 5px 0px; border-top: 1px solid lightgray; border-bottom: 1px solid lightgray;">
                <h4>@Localizer["RegisterOrModifyParticipation"]</h4>
                <AppButton IconName="Register" Label="Register-Participation" Href="@MeetingHref(Meeting, "register")" IsHidden="false" />
            </div>
        }
        @if (Meeting.Layouts.Any())
        {
            <TableTemplate Items="@Meeting.Layouts">
                <TableHeader>
                    <th>@Localizer["Layout"]</th>
                    <th>@Localizer["RegistrationOpens"]</th>
                    <th>@Localizer["ModuleRegistrationCloses"]</th>
                    <th>@Localizer["RegistrationCloses"]</th>
                    <th>@Localizer["More"]</th>
                </TableHeader>
                <RowTemplate Context="item">
                    <td>@item.DescriptionWithName()</td>
                    <td>@item.RegistrationOpensDate()</td>
                    <td>@item.RegistrationOfModulesClosesDate()</td>
                    <td>@item.RegistrationClosesDate()</td>
                    <td>
                        <AppButton Label="Details" IconName="Layout" Href="@LayoutsHref(Id)" />

                    </td>

                </RowTemplate>
            </TableTemplate>
        }


        <MarkdownView Label="Details" Markdown="@Meeting.Details" />
        <MarkdownView Label="Accomodation" Markdown="@Meeting.Accomodation" />
        <MarkdownView Label="Food" Markdown="@Meeting.Food" />
    }

}

@code
{
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }

    ClaimsPrincipal? Principal;
    Meeting? Meeting;
    bool IsLoaded;

    protected override async Task OnParametersSetAsync()
    {
        IsLoaded = false;
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Meeting = await MeetingService.FindByIdAsync(Id);
        IsLoaded = true;
    }



    string LayoutsHref(int id) => $"meetings/{id}/layouts/view";

    MarkupString Item(string label, string text, string element = "div") =>
        new(string.IsNullOrWhiteSpace(text) ? "" : $"<{element}>{Localizer[label]}: <strong>{text}</strong></{element}>");

    string MeetingHref(Meeting meeting, string? function) =>
        function.HasNoValue() ? $"meetings/{meeting.Id}" : $"meetings/{meeting.Id}/{function}";
}
