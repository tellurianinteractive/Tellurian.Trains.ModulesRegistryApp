@page "/Meetings/{id:int}/Edit"
@page "/Meetings/Create/{OrganiserGroupId:int}"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject ITimeProvider TimeProvider

@inject MeetingService MeetingService
@inject LayoutService LayoutService
@inject GroupService GroupService

<PageHeading Context="Meeting" IconClass="@FontAwesome.Meeting" PageAction="@Id.ToAddOrEditPageAction()" HelpContext="Meeting" />

<EditTemplate Item="Meeting" ShowSaveButton="MayEdit" OnValidSubmit="OnValidSubmit" DeleteHref="@MeetingHref(Meeting.Id, "delete")" MayDelete="Meeting.MayDelete(Principal)">
    <Inputs>
        <AppInputSelect Width="2" @bind-Value="Meeting.MeetingType" Label="MeetingType" Items="EnumExtensions.MeetingTypeListboxItems()" />
        <AppInputSelect Width="2" @bind-Value="Meeting.Status" Label="Status" Items="EnumExtensions.MeetingStatusListboxItems()" />
        <AppInputText Width="3" Label="Name" @bind-Value="Meeting.Name" />
        <AppInputSelect Width="3" @bind-Value="Meeting.OrganiserGroupId" Label="Organiser" Items="OrganiserItems" ShowPleaseSelect="MaySelectOrganiserGroup" />
        <AppInputCheck Width="2" Label="IsOrganisingGroupInternal" @bind-Value="Meeting.IsOrganiserInternal" AlignWithFields="true" />

        <AppInputText Width="3" Label="City" @bind-Value="Meeting.CityName" />
        <AppInputText Width="3" Label="Venue" @bind-Value="Meeting.VenueName" />
        <AppInputSelectNullable Width="4" Label="InPartnershipWith" Items="@GroupDomainItems" @bind-Value="@Meeting.GroupDomainId" ShowNoneOption=true />
        <AppInputFill Width="2" />
        <AppInputDate Width="2" @bind-Value="Meeting.StartDate" Label="StartDate" IsDisabled="@DatesIsLocked(Meeting)" OnChangeNotifier="OnStartDateChanged" ShowTime="@Meeting.ShowTime()" />
        <AppInputDate Width="2" @bind-Value="Meeting.EndDate" Label="EndDate" IsDisabled="@DatesIsLocked(Meeting)" ShowTime="@Meeting.ShowTime()" />
        <AppInputTimeOnly Width="2" Label="LatestArrivalTimeWithModules" @bind-Value="Meeting.LatestArrivalTimeWithModules"/>
        <AppInputTimeOnly Width="2" Label="EarliestDepartureTimeWithModules" @bind-Value="Meeting.EarliestDepartureTimeWithModules" />

        <AppInputText Width="12" Label="ExternalLink" @bind-Value="Meeting.ExternalLink"/>
    </Inputs>
    <Buttons>
        @if(Meeting.Id > 0)
        {
            <AppButton Label="Layouts" Href="@LayoutsHref(Id)" IconName="Layout" />
        }
       
    </Buttons>
    <InputsBelowButtons>
        <h2 style="margin-top: 20px">@Localizer["GeneralMeetingInformation"]</h2>
        <ActionMessage AlertType="Warning" Label="DO NOT describe what applies to individual track layouts below" />
        <AppInputMarkdown Label="Details" @bind-Value="@Meeting.Details" MaxNumberOfCharacters="MeetingValidator.DetailsMaxLength" />
        <AppInputMarkdown Label="Accomodation" @bind-Value="@Meeting.Accomodation" MaxNumberOfCharacters="MeetingValidator.AccomodationMaxLenght" />
        <AppInputMarkdown Label="Food" @bind-Value="@Meeting.Food" MaxNumberOfCharacters="MeetingValidator.FoodMaxLength" />
    </InputsBelowButtons>
</EditTemplate>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public int OrganiserGroupId { get; set; }

    ClaimsPrincipal? Principal;
    Meeting Meeting = new Meeting();
    IEnumerable<ListboxItem>? OrganiserItems;
    IEnumerable<ListboxItem>? GroupDomainItems;
    bool MayEdit;
    int RegisteredModulesCount;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Meeting = Id > 0 ? await MeetingService.FindByIdAsync(Id) ?? CreateMeeting : CreateMeeting;
        if (Meeting is not null)
        {
            OrganiserItems = await GroupService.ListboxItemsAsync(Principal, Meeting.OrganiserGroup?.CountryId, OrganiserGroupId);
            MayEdit = (Id == 0 && Principal.IsAuthenticated()) || (Id > 0 && await MeetingService.IsAdministratorOrMeetingOrganiser(Principal, Meeting));
            RegisteredModulesCount = await LayoutService.ModulesRegisteredCountAsync(Principal, Id);
            GroupDomainItems = await GroupService.GroupDomainListboxItemsAsync(Principal);
        }
    }

    Meeting CreateMeeting => OrganiserGroupId > 0 ? new Meeting { OrganiserGroupId = OrganiserGroupId } : new Meeting();

    async Task OnValidSubmit()
    {
        if (Meeting is not null)
        {
            var result = await MeetingService.SaveAsync(Principal, Meeting);
            if (result.Entity is not null)
            {
                Meeting = result.Entity;
                Id = Meeting.Id;
            }
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
    }

    void OnStartDateChanged()
    {
        if ((Meeting.EndDate - Meeting.StartDate).TotalDays > 7)
        {
            if (Meeting.ShowTime())
            {
                Meeting.EndDate = Meeting.StartDate.AddDays(0);
            }
            else
            {
                Meeting.EndDate = Meeting.StartDate.AddDays(3);
            }
            StateHasChanged();            
        }
    }

    bool DatesIsLocked(Meeting meeting) =>
        !Principal.IsCountryAdministratorInCountry(meeting.CountryId()) &&
        (meeting.StartDate < TimeProvider.Now.Date.AddDays(7) ||
          RegisteredModulesCount > 0);

    bool MaySelectOrganiserGroup => OrganiserGroupId == 0;


    string LayoutsHref(int meetingId) => $"meetings/{meetingId}/layouts/edit";
    string MeetingHref(int meetingId, string? function) => function.HasNoValue() ? $"meetings/{meetingId}" : $"meetings/{meetingId}/{function}";

}
