@page "/Meetings/{id:int}/Delete"

@attribute [Authorize(Policy = "Admin")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject ITimeProvider TimeProvider
@inject NavigationManager Navigator

@inject MeetingService MeetingService
@inject LayoutService LayoutService
@inject GroupService GroupService

<PageHeading Context="Meeting" IconClass="@FontAwesome.Meeting" PageAction="@PageAction.Delete" />

@if (Meeting is null)
{
    <ActionMessage AlertType="stop" Label="NothingToDelete" />
}
else if (MayBeDeleted)
{
    <AppButton Label="ConfirmDelete" OnClickCallback="OnDelete" AlwaysShowLabel=true/>
}
else
{
    <ActionMessage AlertType="info" Label="ConditionsForDeleteNotMet" />
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    ClaimsPrincipal? Principal;
    Meeting? Meeting;

    bool MayBeDeleted => Principal.MayDelete(Meeting);

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Meeting = Id > 0 ? await MeetingService.FindByIdAsync(Id) : null;
    }

    private async Task OnDelete()
    {
        if (Meeting is not null)
        {
            var result = await MeetingService.DeleteAsync(Principal, Meeting);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
            await Task.Delay(2000);
            Navigator.NavigateTo("/Meetings/Index");
        }
    }
}
