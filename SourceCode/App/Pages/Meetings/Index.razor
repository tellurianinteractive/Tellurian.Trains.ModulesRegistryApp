@page "/Meetings/Index"
@page "/Meetings/{countryid:int}/Index"

@inject IStringLocalizer<App> Localizer
@inject ITimeProvider TimeProvider
@inject IToastService ToastService

@inject MeetingService MeetingService
@inject GroupService GroupService

<PageHeading ObjectName="Meetings" IconClass="@FontAwesome.Meeting" PageAction="PageAction.List" />

@if (Principal.IsGlobalOrCountryAdministrator(DefaultCountryId))
{
    <AppButton Label="Add" Href="Meetings/0/edit"></AppButton>
}

<TableTemplate Items="Meetings" RowStyle="RowStyle" RowDividerHeading="RowDividerHeading">
    <TableHeader>
        <th>@Localizer["Country"]</th>
        <th colspan="2">@Localizer["Meeting"]</th>
        <th>@Localizer["Layouts"]</th>
        <th style="text-align: center">@Localizer["Status"]</th>
        <th>@Localizer["Venue"]</th>
        <th>@Localizer["City"]</th>
        <th colspan="2" style="text-align: center">@Localizer["Duration"]</th>
        <th class="noprint">@Localizer["Actions"]</th>
    </TableHeader>
    <RowTemplate Context="item">
        <td><img src="@item.meeting.OrganiserGroup.Country.FlagSrc()" /></td>
        <td><span class="@MeetingTypeIcon(item.meeting)" title="@(item.meeting.MeetingType.ToEnumLocalized<MeetingType>())"></span></td>
        <td><a target="@MeetingLinkTarget(item.meeting)" href="@MeetingHref(item.meeting, "view")">@item.meeting.Name</a></td>
        <td>@item.meeting.Scales()</td>
        <td align="center">@item.meeting.DisplayedStatus(TimeProvider.LocalTime)</td>
        <td>@item.meeting.VenueName</td>
        <td>@item.meeting.CityName</td>
        <td align="center">@item.meeting.StartOrEventDate()</td>
        <td align="center">@item.meeting.EndDateOrTimes()</td>
        <td class="noprint">
            <AppButton Label="Edit" Href="@MeetingHref(item.meeting, "edit")" IsHidden="@(!item.MayEdit)" />
            <AppButton Label="Register" Href="@MeetingHref(item.meeting, "register")" IsHidden="@(!item.meeting.MayRegister(Principal, TimeProvider.Now.DateTime))" />
        </td>
    </RowTemplate>
</TableTemplate>


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int CountryId { get; set; }

    ClaimsPrincipal? Principal;
    IEnumerable<(bool MayEdit, Meeting meeting)>? Meetings;

    private int DefaultCountryId => CountryId > 0 ? CountryId : Principal.CountryId();

    string MeetingHref(Meeting meeting, string? function) =>
        meeting.ExternalLink.HasValue() && function=="view" ? meeting.ExternalLink :
        function.HasNoValue() ? $"meetings/{meeting.Id}" : $"meetings/{meeting.Id}/{function}";

    string MeetingLinkTarget(Meeting meeting) => meeting.ExternalLink.HasValue() ? "_blank" : "_self";

    protected override async Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();

    }

    protected override async Task OnParametersSetAsync()
    {
        Meetings = await MeetingService.GetAllAsync(Principal, CountryId, 31);
    }

    string MeetingTypeIcon(Meeting meeting) => meeting.MeetingType switch
    {
        0 => FontAwesome.Modules,
        1 => FontAwesome.ClubEvent,
        2 => FontAwesome.Market,
        _ => "",
    };

    string RowStyle((bool mayEdit, Meeting meeting) item) =>
        item.meeting.EndDate < TimeProvider.LocalTime ? "background-color: lightgray": "";

    int currentMeetingYear = 0;

    bool showRecentHeader = true;

    string RowDividerHeading((bool mayEdit, Meeting meeting) item)
    {
        var result = string.Empty;
        if (item.meeting.EndDate < TimeProvider.LocalTime)
        {
            if (showRecentHeader) result = Localizer["RecentlyPastMeetings"];
            showRecentHeader = false;
        }
        else if (item.meeting.EndDate.Year > currentMeetingYear)
        {
            result = currentMeetingYear == 0 ? $"{Localizer["UpcomingMeetings"]} {item.meeting.EndDate.Year}" : $"{Localizer["Meetings"]} {item.meeting.EndDate.Year}";
            currentMeetingYear = item.meeting.EndDate.Year;
        }        
        return result;
    }

}
