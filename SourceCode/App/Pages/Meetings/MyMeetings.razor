@page "/Meetings/My"
@page "/Persons/{Id:int}/Meetings"
@page "/Persons/{Id:int}/Meetings/InGroup/{GroupId:int}"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject PersonService PersonService
@inject MeetingService MeetingService
@inject ITimeProvider TimeProvider

<PageHeading IconClass="@FontAwesome.Meeting" Label="MyForthcomingMeetings" PageAction="PageAction.List" />

@if (MyParticipations is not null)
{

    @if (MyParticipations.Any())
    {
        @foreach (var participant in MyParticipations.OrderBy(m => m.Meeting.StartDate))
        {
            <MeetingWithLayouts MeetingParticipant="participant" MayEdit="participant.MayEditParticipation(Principal, participant.Meeting, TimeProvider)" />
        }
    }
    else
    {
        @Localizer["YouAreCurrentlyNotRegisteredToAnyForthComingMeeting"]
    }
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public int GroupId { get; set; }
    private ClaimsPrincipal? Principal;
    private Person? Participant;
    private IEnumerable<MeetingParticipant>? MyParticipations;

    protected async override Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Participant = await PersonService.FindByIdAsync(Principal, PersonId);
        MyParticipations = await MeetingService.GetRegisteredMeetingsForPerson(Principal, PersonId, GroupId);
    }

    int PersonId => Id > 0 ? Id : Principal.PersonId();
}