@page "/Persons/{OwnerId:int}/Stations"
@page "/Persons/{OwnerId:int}/Stations/InGroup/{GroupId:int}"

@inject IStringLocalizer<App> Localizer

@inject PersonService PersonService
@inject StationService StationService
@inject GroupService GroupService

<PageHeading ObjectName="OperationLocations" Context="Owner" IconClass="@FontAwesome.Station" PageAction="PageAction.List" />

<StationsList Stations="OwnedStations" OwningPersonId="OwnerId" OwningGroupId=GroupId MayEdit="MayEdit" AnyModules="true" />

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int GroupId { get; set; }
    [Parameter] public int OwnerId { get; set; }
    private ClaimsPrincipal? Principal;
    private Person? Owner;
    private IEnumerable<Station>? OwnedStations;
    bool MayEdit;

    protected async override Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Owner = await PersonService.FindByIdAsync(Principal, OwnerId);
        if (Owner is null)
        {
            OwnerId = 0;
            GroupId = 0;
            OwnedStations = Array.Empty<Station>();
        }
        else
        {
            var ownershipRef = ModuleOwnershipRef.PersonInGroup(Owner.Id, GroupId);
            MayEdit = await Principal.MayEdit(ownershipRef, GroupService);
            OwnedStations = await StationService.GetAllAsync(Principal, ownershipRef);
        }
    }
}
