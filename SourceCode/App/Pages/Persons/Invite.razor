@page "/Persons/{id:int}/Invite"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject IMailSender MailSender
@inject ITimeProvider TimeProvider
@inject NavigationManager Navigator

@inject PersonService PersonService
@inject UserService UserService
@inject ContentService ContentService
@inject CountryService CountryService

<PageHeading Label="Invite" Context="Invitation?.Recipient.Person" PageAction="PageAction.Unknown"/>

@if (CanSend)
{
    <h2>@Localizer["Message"]</h2>
    <hr />
    @((MarkupString)DisplayedMessage)
    <hr />
    <input class="form-control" type="text" @bind="@PersonalMessage" @bind:event="oninput" @onkeyup="@UpdateMessage" />
    <div>
        <input class="form-check" type="checkbox" @bind="@IsReadOnly" />
        <label class="form-check-label">@Localizer["UserIsReadOnly"]</label>
    </div>
    <div class="col-12">
        <button class="btn btn-primary" @onclick="Send"><span class="@FontAwesome.Invite" />@Localizer["Send"]</button>
    </div>
}
else
{
    @Localizer["InvitedPersonHasNoEmail"];
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    ClaimsPrincipal? Principal;
    UserInvitation? Invitation;
    private string DisplayedMessage = string.Empty;
    private string? PersonalMessage;
    private bool IsReadOnly;
    private bool CanSend;

    override protected async Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (Principal is null) return;
        var userId = Principal.UserId();
        var inviter = await PersonService.FindByUserIdAsync(Principal, userId);
        if (inviter is null) return;
        var invitedPerson = await PersonService.FindByIdAsync(Principal, Id);
        if (invitedPerson.HasEmail())
        {
            CanSend = true;
            var userCountry = await CountryService.FindById(invitedPerson.CountryId);
            if (userCountry is null) return;
            var invited = await UserService.FindOrCreateAsync(invitedPerson.PrimaryEmail(), null, IsReadOnly);
            if (invited is null) return;
            var message = await ContentService.GetTextContent("Invitation", invited.PreferredLanguage());
            Invitation = new UserInvitation(invited, inviter, Localizer["InvitationToModuleRegistry"].ToString(), message, Navigator.BaseUri) { PersonalMessage = PersonalMessage };
            DisplayedMessage = Invitation.MessageHtml;
        }
    }

    void UpdateMessage()
    {
        if (Invitation is not null)
        {
            Invitation = Invitation with { PersonalMessage = PersonalMessage };
            DisplayedMessage = Invitation.MessageHtml;
            StateHasChanged();
        }
    }

    private async Task Send()
    {
        var count = 0;
        if (Invitation is not null)
        {
            Invitation.Recipient.IsReadOnly = IsReadOnly;
            Invitation.Recipient.RegistrationTime = TimeProvider.Now;
            _ = await UserService.UpdateAsync(Invitation.Recipient);

            var message = Invitation.MailMessage;
            if (message is not null)
            {
                count = await MailSender.SendMailMessageAsync(message);
            }
            ToastService.ShowSuccessOrFailure(Localizer, count, "InvitationSent");
        }
    }
}
