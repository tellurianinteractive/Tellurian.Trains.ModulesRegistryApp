@using System.Security.Claims

@page "/Persons"
@page "/Persons/Country/{countryId:int}"

@attribute [Authorize(Policy = "Admin")]

@inject IStringLocalizer<App> Localizer
@inject NavigationManager Navigator

@inject PersonService PersonService
@inject CountryService CountryService
@inject UserService UserService
@inject AppService AppService

<PageHeading ObjectName="Persons" IconClass="@FontAwesome.People" PageAction="@PageAction.List" />

<ListboxSelector OnSelected="OnSelectedCountry" Items="Countries" ItemType="Country" IsVisible="IsSelectCountryVisible" SelectedId=CountryId />

@if (CountryId > 0)
{
    <div class="col-12" style="margin-top: 10px">
        <AppButton Href=@AddHref(CountryId) Label="Add" />
        @if (HasFilter)
        {
            <AppButton Label="RemoveFiltering" OnClickCallback="RemoveFilter" IconName="@FontAwesome.Erase" />
        }
    </div>
    <hr/>
}

<div class="grid" tabindex="-1">
    <QuickGrid Items="@FilteredPeople" Virtualize="true" Pagination="PaginationState">
        <PropertyColumn Property="@(p => p.FirstName)" Sortable="true" Title="@Localizer["FirstName"]">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="FirstNameFilter" @bind:event="oninput" placeholder="@Localizer["FirstName"]" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(p => p.LastName)" Sortable="true" Title="@Localizer["LastName"]">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="LastNameFilter" @bind:event="oninput" placeholder="@Localizer["LastName"]" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(p => p.CityName)" Sortable="true" Title="@Localizer["City"]">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="CityNameFilter" @bind:event="oninput" placeholder="@Localizer["CityName"]" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <TemplateColumn Title="@Localizer["Status"]" Align="Align.Center">
            @context.StatusIcon()
        </TemplateColumn>
        <TemplateColumn Title="@Localizer["FremoNumber"]">
            @context.FremoNumber()
        </TemplateColumn>
        <TemplateColumn Title="@Localizer["LastActive"]" Context="person">
            <UserStatusView User="person.User"></UserStatusView>
        </TemplateColumn>
        <TemplateColumn Title="@Localizer["Actions"]" Context="person">
            @if (Principal.IsAuthorisedInCountry(person.CountryId))
            {
                <AppButton Href="@EditHref(person)" Label="Edit" />
                <AppButton Href="@ModulesHref(person)" Label="Modules" />
                <AppButton Href="@StationsHref(person)" Label="Stations" />
                <AppButton Href="@InviteHref(person)" Label="Invite" IsHidden="@(!person.MayBeInvited())" />
                <AppButton Label="Unlock" OnClickCallback="@(() => UnlockUser(person.User))" IsHidden=@(!person.User.IsLockedOut()) />
            }
        </TemplateColumn>
    </QuickGrid>
</div>
<Paginator State="@PaginationState">

</Paginator>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int CountryId { get; set; }

    private ClaimsPrincipal? Principal;
    private IEnumerable<Person> People = Array.Empty<Person>().AsQueryable();
    private IEnumerable<ListboxItem>? Countries;



    protected async override Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Countries = await CountryService.ListboxItemsAsync(Principal);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CountryId < 1)
        {
            var id = Principal.CountryId();
            Navigator.NavigateTo($"/Persons/Country/{id}");
        }
        else
        {
            AppService.LastCountryId = CountryId;
            People = await PersonService.GetAllInCountryAsync(Principal, AppService.LastCountryId);
        }
    }


    private void OnSelectedCountry(int id)
    {
        if (id > 0)
        {
            AppService.LastCountryId = id;
            Navigator.NavigateTo($"/Persons/Country/{id}");
        }
    }

    async Task UnlockUser(User? user)
    {
        user = await UserService.UnlockUser(user);
    }

    PaginationState PaginationState = new() { ItemsPerPage = 20 };
    string? FirstNameFilter;
    string? LastNameFilter;
    string? CityNameFilter;
    IQueryable<Person> FilteredPeople =>
        People.AsQueryable()
                .Where(p =>
                    p.FirstName.StartingWith(FirstNameFilter) &&
                    p.LastName.StartingWith(LastNameFilter) &&
                    p.CityName.StartingWith(CityNameFilter));

    void RemoveFilter()
    {
        FirstNameFilter = default;
        LastNameFilter = default;
        CityNameFilter = default;
        StateHasChanged();
    }
    bool HasFilter => FirstNameFilter.HasValue() || LastNameFilter.HasValue() || CityNameFilter.HasValue();

    bool IsSelectCountryVisible => Countries is not null && Countries.Count() > 1;

    string AddHref(int countryId) => countryId > 0 ? $"persons/0/edit/{countryId}" : string.Empty;
    string EditHref(Person person) => $"persons/{person.Id}/edit";
    string ModulesHref(Person person) => $"persons/{person.Id}/modules";
    string StationsHref(Person person) => $"persons/{person.Id}/stations";
    string InviteHref(Person person) => $"persons/{person.Id}/invite";
    string DeleteHref(Person person) => $"persons/{person.Id}/delete";
}
