@page "/Persons/{id:int}/Edit"
@page "/Persons/{id:int}/Edit/{countryId:int}"
@page "/Persons/{id:int}/EditGroup/{groupId:int}"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject NavigationManager Navigator

@inject PersonService PersonService
@inject UserService UserService
@inject CountryService CountryService
@inject GroupService GroupService

<PageHeading ObjectName="Person" IconClass="@FontAwesome.User" PageAction="@Id.ToAddOrEditPageAction()" HelpContext="Person" />

@if (Person is null)
{

}
else if (Principal.IsAuthorisedInCountry(Person.CountryId))
{
    <UserStatusView User="Person.User" />
    <EditTemplate Item="@Person" OnValidSubmit="OnValidSumbit" DeleteHref="@DeleteHref(Person)" MayDelete="MayDelete(Person)">
        <Inputs>
            <AppInputText Width="2" Label="FirstName" @bind-Value="Person.FirstName" />
            <AppInputText Width="2" Label="MiddleName" @bind-Value="Person.MiddleName" />
            <AppInputText Width="2" Label="LastName" @bind-Value="Person.LastName" />
            <AppInputText Width="2" Label="CityName" @bind-Value="Person.CityName" />
            <AppInputSelect Width="2" Label="Country" @bind-Value="Person.CountryId" Items="CountriesItems" ShowPleaseSelect="true" />
            <AppInputFill Width="2" />
            <AppInputText Width="6" Label="EmailAddresses" @bind-Value="Person.EmailAddresses" />
                       <AppInputFill Width="6" />

            <AppInputNumber Width="1" Label="FremoNumber" @bind-Value="Person.FremoMemberNumber" />
            @if (Person.IsFremoMember())
            {
                <AppDisplay Width="2" Label="FremoMemberNumber" Value="@Person.FremoNumber()" BackColor="#e9ecef" />
                <AppInputText Width="2" Label="FremoPrefix" @bind-Value="Person.FremoOwnerSignature" />
                <AppInputText Width="7" Label="FremoReservedAdresses" @bind-Value="Person.FremoReservedAdresses" Placeholder="LocoAddressExample" />

            }
            <hr/>
            @if (Principal.IsCountryOrGlobalAdministrator() && Person.User is not null)
            {
                <AppInputCheck Width="2" Label="IsGlobalAdministrator" @bind-Value="Person.User.IsGlobalAdministrator" IsDisabled="!IsSelfAsGlobalAdministrator" />
                <AppInputCheck Width="2" Label="IsCountryAdministrator" @bind-Value="Person.User.IsCountryAdministrator" IsDisabled="IsNotGlobalAdministrator" />
                <AppInputCheck Width="2" Label="IsApiAccessPermitted" @bind-Value="Person.User.IsApiAccessPermitted" />
                <AppInputCheck Width="2" Label="MayUploadSkpDrawing" @bind-Value="Person.User.MayUploadSkpDrawing" />
                <AppInputCheck Width="2" Label="MayVerifyWiFreds" @bind-Value="Person.User.MayManageWiFreds" />

                @if (Person.User.IsGlobalAdministrator || Person.User.IsCountryAdministrator)
                {
                    <AppInputText Width="6" Label="AdministratorAreaOfResposibility" @bind-Value="Person.User.AdministratorAreaOfResposibility" />
                    <AppInputFill Width="6" />
                }
                <AppInputNumber Width="3" Label="PasswordResetAttempts" @bind-Value="Person.User.PasswordResetAttempts" IsDisabled=true />
                <AppInputNumber Width="3" Label="FailedLoginAttempts" @bind-Value="Person.User.FailedLoginAttempts" IsDisabled=true />
                @if (Person.User.IsApiAccessPermitted)
                {
                    <AppDisplay Width="6" Label="ApiKey" Value="@Person.User.ApiKey()" BackColor="#e9ecef" />
                }
                @if (Person.User.AdministratorAreaOfResposibility.HasValue())
                {
                    <AppInputText Width="6" Label="AdministratorAreaOfResposibility" @bind-Value="Person.User.AdministratorAreaOfResposibility" IsDisabled="IsNotAdministrator" />
                }
            }
        </Inputs>

    </EditTemplate>


    @if (Person.User is not null && Person.User.IsLockedOut())
    {
        <br />
        <h3>@Localizer["UserIsLockedOut"]</h3>
        <AppButton Label="Unlock" OnClickCallback="UnlockUser" />
    }
}
else
{
    <div class="alert alert-danger">
        @Localizer["NotAuthorized"]
    </div>
}
@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public int CountryId { get; set; }
    [Parameter] public int GroupId { get; set; }

    private Person? Person;
    private Group? Group;
    private IEnumerable<ListboxItem>? CountriesItems;
    private ClaimsPrincipal? Principal;
    private string? ApiKey;

    protected async override Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        CountriesItems = await CountryService.ListboxItemsAsync(Principal, IsGroupAdministrator);
        Person = await GetOrCreatePersonAsync();
        if (Person.User is not null)
        {
            ApiKey = Person.User.ApiKey();
        }
        if (GroupId > 0) Group = await GroupService.FindByIdAsync(Principal, GroupId);
    }

    private async Task OnValidSumbit()
    {
        if (Principal is null || Person is null) return;
        var result = await PersonService.SaveAsync(Principal, Person, IsGroupAdministrator);
        if (result.Count < 1)
        {
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
        else
        {
            Person = result.Entity;
            if (Person is not null) CountryId = Person.CountryId;
            if (IsNotGroupMember)
            {
                var addresult = await GroupService.AddMemberAsync(Principal, new GroupMember { GroupId = GroupId, PersonId = Person!.Id });
            }
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
            await Task.Delay(3000);
            Navigator.NavigateTo(AfterSaveHref);
        }
    }

    async Task UnlockUser()
    {
        if (Person is null) return;
        Person.User = await UserService.UnlockUser(Person.User);
    }

    private bool IsGroupAdministrator => Group is not null && Group.GroupMembers.Any(gm => gm.PersonId == Principal.PersonId() && gm.IsGroupAdministrator);

    private async Task<Person> GetOrCreatePersonAsync() =>
        Principal is null || Id == 0 ? DefaultPerson : await PersonService.FindByIdAsync(Principal, Id) ?? DefaultPerson;

    private int DefaultCountryId => CountryId > 0 ? CountryId : Principal is not null ? Principal.CountryId() : CountriesItems is null ? 0 : CountriesItems.Count() == 1 ? CountriesItems.First().Id : 0;
    private Person DefaultPerson => new Person { CountryId = DefaultCountryId };
    private string AfterSaveHref => GroupId > 0 ? $"Groups/{GroupId}/Members" : $"/Persons/Country/{CountryId}";
    private bool IsNotGroupMember => GroupId > 0 && (Person is null || !Person.GroupMembers.Any(gm => gm.GroupId == GroupId));
    private bool IsNotGlobalAdministrator => !Principal.IsGlobalAdministrator();
    private bool IsSelfAsGlobalAdministrator => Principal.IsGlobalAdministrator() && Principal.UserId() == Person?.User?.Id;
    private bool IsNotAdministrator => Person?.User is null || !(Person.User.IsCountryAdministrator || Person.User.IsGlobalAdministrator);
    string DeleteHref(Person person) => $"persons/{person.Id}/delete";
    bool MayDelete(Person person) => Principal.IsGlobalAdministrator() || Principal.IsCountryAdministratorInCountry(person.CountryId);

}