@page "/Meetings/{id:int}/Layouts/View"

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject MeetingService MeetingService
@inject GroupService GroupService

<PageHeading Label="Layouts" Context="@Meeting" IconClass="Layout" />

@if (Meeting is null)
{
    <ActionMessage Label="LoadingRecords" AlertType="info" />
}
else if (Meeting.Layouts.Count() == 0)
{
    <ActionMessage Label="NoRecordsToDisplay" AlertType="warning" />
}
else
{
    @foreach (var item in Meeting.Layouts)
    {
        <div style="padding-top: 10pt; padding-bottom: 6px;">
            @Display("Layout", item.Description(), "h3")
            @Display("Scale", $"{item.PrimaryModuleStandard.Scale.ShortName} (1:{item.PrimaryModuleStandard.Scale.Denominator})")
            @Display("RegistrationOpens", item.RegistrationOpeningDate.ToString("ddd d MMM yyyy"))
            @Display("ModuleRegistrationCloses", item.ModuleRegistrationClosingDate().ToString("ddd d MMM yyyy"))
            @Display("RegistrationCloses", item.RegistrationClosingDate.ToString("ddd d MMM yyyy"))
            @Display("OperationTheme", item.Theme)
            @Display("Period", OperatingPeriod(item))
            @Display("PrimaryModuleStandard", item.PrimaryModuleStandard.ShortName)
            @Display("Organiser", item.OrganisingGroup.FullName)
            @if (item.ContactPersonId.HasValue) @Display("ContactPerson", item.ContactPerson.Name())
            @if (Principal.IsAuthenticated() && item.IsRegistrationPermitted)
            {
                <AppButton Label="Modules" IconName="@FontAwesome.Modules" Href="@LayoutModulesLink(item.Id)" />
            }
            <MarkdownView Label="Details" Markdown="@item.Details"/>
            <hr/>
        </div>
    }
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }

    ClaimsPrincipal? Principal;
    Meeting? Meeting;

    protected override async Task OnParametersSetAsync()
    {
        Meeting = null;
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Meeting = await MeetingService.FindByIdAsync(Id);
    }

    MarkupString Display(string label, string text, string element = "div") => new(string.IsNullOrWhiteSpace(text) ? "" : $"<{element}>{Localizer[label]}: <strong>{text}</strong></{element}>");
    string OperatingPeriod(Layout layout) => layout.FirstYear.HasValue || layout.LastYear.HasValue ? $"{layout.FirstYear} - {layout.LastYear}" : string.Empty;
    string LayoutModulesLink(int id) => $"layouts/{id}/modules";
    string LayoutDescription(Layout layout) =>
        layout.Theme.HasNoValue() ? $"{layout.PrimaryModuleStandard.ShortName}" :
        $"{layout.Theme}";

}
