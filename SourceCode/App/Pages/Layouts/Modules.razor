@page "/layouts/{id:int}/modules"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime

@inject MeetingService MeetingService
@inject LayoutParticipantService LayoutParticipantService
@inject LayoutService LayoutService

<PageHeading Label="@PageHeadingText" IconClass="@FontAwesome.Module" PageAction="PageAction.List" />
@if (LayoutParticipants is null)
{
    <ActionMessage Label="FetchingData" />
}
else if (LayoutParticipants.Count() == 0)
{
    <ActionMessage Label="NoParticipantsRegistered" />
}
else
{
    <h4>
        @Layout?.ParticipationSummary(FilteredParticipants!.Count()).
        @string.Format(Localizer["NumberModulesRegistered"], FilteredParticipants!.Sum(lp => lp.LayoutModules.Count())).
        @string.Format(Localizer["TotalTrackMeters"], FilteredParticipants!.Sum(lp => lp.LayoutModules.TotalLengthMeters())).
    </h4>
    @if (IsOrganiser)
    {
        <AppInputCheck Label="OnlyThoseWithModules" @bind-Value="OnlyThoseWithModules" ShowLabelWhenPrinting="OnlyThoseWithModules" />
        <AppInputCheck Label="OnlyThoseWithOperationsPlaces" @bind-Value="OnlyThoseWithOperationsPlaces" ShowLabelWhenPrinting="OnlyThoseWithOperationsPlaces" />

        <div style="padding: 10px 0px">
            <MailToButton Recipients="FilteredParticipants!.ParticipantsMails()" Sender="Principal!.Sender()" Subject="@Layout.DescriptionWithTheme()" Label="@SendMailLabel" />
            <MailCopyButton Recipients="FilteredParticipants!.ParticipantsMails()" Label="@CopyMailLabel" />
            @if (Layout is not null)
            {
                <AppButton Label="RegisterOrModifyParticipation" Href="@($"meetings/{Layout.MeetingId}/register")" IconName="@FontAwesome.People" />
            }
        </div>
    }

    <TableTemplate TItem="LayoutParticipant" Items="FilteredParticipants!.OrderBy(mp => mp.Person.Name())" HideNoRecordsToDisplay="true" RowStyle="RowStyle">
        <TableHeader>
            <th width="35%">@Localizer["Name"]</th>
            <th>@Localizer["Participates"]/@Localizer["Modules"]</th>
            <th class="noprint">@Localizer["RegistrationTime"]</th>
            <th class="noprint">@Localizer["Actions"] </th>
        </TableHeader>
        <RowTemplate Context="participant">
            <td style="white-space: nowrap;">@ParticipantNameAndMore(participant)</td>
            <td>@participant.MeetingParticipant.Participates(Localizer)</td>
            <td class="noprint">@participant.MeetingParticipant.RegistrationTime.ToString("g")</td>
            <td><AppButton Type="Edit" Label="@(participant.LayoutModules.Any() ? "Edit-Modules" : "Register-Modules")" Href="@($"MeetingParticipants/{participant.MeetingParticipant.Id}/Layouts/{Layout?.Id}/RegisterModules")" /> </td>
        </RowTemplate>
        <SubRowsTemplate Context="participant">
            @if (participant.LayoutModules.Any())
            {
                @if (participant.NoteToOrganiserMarkdown.HasValue())
                {
                    <tr>
                        <td colspan="4">
                            <span style="color: red">@participant.NoteToOrganiserMarkdown</span>
                        </td>
                    </tr>
                }
                @foreach (var layoutModule in participant.LayoutModules.OrderBy(lm => lm.Module.FullName))
                {
                    <tr>
                        <td>
                            @layoutModule.FullNameAndConfiguration()
                            <span >
                                <DocumentLink DocumentId="layoutModule.Module.DwgDrawingId" FileExtension="dwg" />
                                <DocumentLink DocumentId="layoutModule.Module.SkpDrawingId" FileExtension="skp" />
                            </span>
                        </td>
                        <td>@layoutModule.Module.Description()</td>
                        <td class="noprint">@layoutModule.RegisteredTime.ToString("d")</td>
                        <td class="noprint">
                            @if (layoutModule.HasCargoCustomers())
                            {
                                <AppButton Label="InternalWaybills" IconName="@FontAwesome.Waybills" Href="@WaybillsHref(layoutModule)" />
                            }
                        </td>
                    </tr>
                }
            }
            else
            {
                <tr>
                    <td colspan="4">
                        @if (participant.BringsModulesAfterAgreement)
                        {
                            <span style="color: red">@Localizer["BringsModulesAfterAgreement"]. </span>
                        }
                        else
                        {
                            <span>@Localizer["NoModulesRegistered"]. </span>
                        }
                        <span>@participant.NoteToOrganiserMarkdown</span>
                    </td>
                </tr>
            }
        </SubRowsTemplate>
    </TableTemplate>
}



@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }

    ClaimsPrincipal? Principal;
    Meeting? Meeting;
    Layout? Layout;
    IEnumerable<LayoutParticipant>? LayoutParticipants;
    IEnumerable<LayoutParticipant>? FilteredParticipants =>
        OnlyThoseWithOperationsPlaces ? LayoutParticipants?.Where(lp => lp.LayoutStations.Count > 0) :
        OnlyThoseWithModules ? LayoutParticipants?.Where(lp => lp.LayoutModules.Count > 0) :
        LayoutParticipants;
    IEnumerable<LayoutStation>? LayoutStations;
    IEnumerable<LayoutModule>? LayoutModules;
    bool IsOrganiser;
    bool OnlyThoseWithModules;
    bool OnlyThoseWithOperationsPlaces;
    bool HasParticipantsFromDifferentCountries;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Layout = await LayoutService.GetLayoutAsync(Principal, Id);
        if (Layout is not null)
        {
            Meeting = Layout.Meeting;
            IsOrganiser = await MeetingService.IsAdministratorOrMeetingOrganiser(Principal, Meeting);
            LayoutParticipants = await LayoutParticipantService.GetAllForLayout(Principal, Id);
            if (LayoutParticipants.Any())
            {
                LayoutModules = LayoutParticipants is null ? [] : LayoutParticipants.SelectMany(lp => lp.LayoutModules).ToList();
                LayoutStations = LayoutParticipants is null ? [] : LayoutParticipants.SelectMany(lp => lp.LayoutStations).ToList();
                foreach (var layoutModule in LayoutModules)
                {
                    layoutModule.LayoutStation = LayoutStations.SingleOrDefault(ls => ls.Station.PrimaryModuleId == layoutModule.ModuleId);
                }
            }
            HasParticipantsFromDifferentCountries = LayoutParticipants!.Select(lp => lp.Person.CountryId).Distinct().Count() > 1;
        }
    }
    string PageHeadingText => $"{Localizer["RegisteredModules"]} {Layout?.DescriptionWithMeetingAndLayoutName()}";
    IEnumerable<object> SubItems(LayoutParticipant participant) => participant.LayoutModules.OrderBy(lm => lm.Module.FullName);

    string WaybillsHref(LayoutModule layoutModule) => $"reports/waybills/layout/{layoutModule.LayoutParticipant.LayoutId}/station/{LayoutStation(layoutModule.LayoutStationId)?.StationId}";
    string RowStyle(LayoutParticipant participant) => "font-weight: bold;";

    LayoutStation? LayoutStation(int? id) => id is null || LayoutStations is null ? null : LayoutStations.SingleOrDefault(ls => ls.Id == id);

    async Task NavigateToNewTab(LayoutModule layoutModule)
    {
        await JSRuntime.InvokeAsync<object>("open", WaybillsHref(layoutModule), "_blank");
    }

    MarkupString ParticipantNameAndMore(LayoutParticipant participant) => new(
        HasParticipantsFromDifferentCountries ?
            $""" <img src="{participant.Person.Country.FlagSrc()}">  {participant.NameWithCityAndCountry()}, {participant.Person.FremoNumber()} {participant.Person.EmailIcon()}""" :
            $"""{participant.NameWithCity()}, {participant.Person.FremoNumber()} {participant.Person.EmailIcon()}""");

    string SendMailLabel =>
        OnlyThoseWithOperationsPlaces ? string.Format(Localizer["SendMailTo"], Localizer["OnlyThoseWithOperationsPlaces"].ToString().ToLowerInvariant()) :
        OnlyThoseWithModules ? string.Format(Localizer["SendMailTo"], Localizer["OnlyThoseWithModules"].ToString().ToLowerInvariant()) :
        "SendMailToAll";

    string CopyMailLabel =>
        OnlyThoseWithOperationsPlaces ? string.Format(Localizer["CopyMailAdressesTo"], Localizer["OnlyThoseWithOperationsPlaces"].ToString().ToLowerInvariant()) :
        OnlyThoseWithModules ? string.Format(Localizer["CopyMailAdressesTo"], Localizer["OnlyThoseWithModules"].ToString().ToLowerInvariant()) :
        "CopyAllMailAddresses";

}
