@page "/layouts/{id:int}/modules"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IJSRuntime JSRuntime

@inject MeetingService MeetingService
@inject LayoutParticipantService LayoutParticipantService
@inject LayoutService LayoutService

<PageHeading Label="@PageHeadingText" IconClass="@FontAwesome.Module" PageAction="PageAction.List" />
@if (LayoutParticipants is null)
{
    <ActionMessage Label="FetchingData" />
}
else if (LayoutParticipants.Count() == 0)
{
    <ActionMessage Label="NoParticipantsRegistered" />
}
else
{
    <h4>
        @string.Format(Localizer["NumberParticipantsRegistered"], LayoutParticipants.Count()),
        @string.Format(Localizer["NumberModulesRegistered"], LayoutParticipants.Sum(lp => lp.LayoutModules.Count())).
    </h4>
    @if (IsOrganiser)
    {
        <div style="padding: 10px 0px">
            <MailToButton Recipients="LayoutParticipants.ParticipantsMails()" Sender="Principal!.Sender()" Subject="@Layout.DescriptionWithTheme()" />
            <MailCopyButton Recipients="LayoutParticipants.ParticipantsMails()" />
            @if (Layout is not null)
            {
                <AppButton Label="RegisterOrModifyParticipation" Href="@($"meetings/{Layout.MeetingId}/register")" IconName="@FontAwesome.People"/>
            }
        </div>
    }
    @foreach (var participant in LayoutParticipants.OrderBy(mp => mp.Person.Name()))
    {
        @if (participant.AllLayoutModules(LayoutModules).Any())
        {
            <TableTemplate Items="participant.AllLayoutModules(LayoutModules).OrderBy(lm => lm.Module.FullName)" HideNoRecordsToDisplay="true">
                <TableHeader>
                    <th width="30%">@participant.Person.Name(), @participant.Person.CityName</th>
                    <th width="50%">@Localizer["Info"]</th>
                    <th width="120px">@Localizer["RegistrationTime"]</th>
                    <th class="noprint">@Localizer["Actions"] </th>
                </TableHeader>
                <RowTemplate Context="item">
                    <td>@item.Module.FullName</td>
                    <td>@item.Module.Info()</td>
                    <td width="120px">@item.RegisteredTime.ToString("d")</td>
                    <td class="noprint">
                        @if (item.HasLayoutStationId())
                        {
                            <AppButton Label="InternalFreights" Href="@WaybillsHref(item)" />
                        }
                    </td>
                </RowTemplate>
            </TableTemplate>
        }
        else
        {
            <div style="margin: 10px 0px; padding: 4px">
                <span style="font-weight: bold; ">@participant.Person.Name(), @participant.Person.CityName</span>: @Localizer["NoModulesRegistered"]
            </div>
        }
    }
}


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }

    ClaimsPrincipal? Principal;
    Meeting? Meeting;
    Layout? Layout;
    IEnumerable<LayoutParticipant>? LayoutParticipants;
    IEnumerable<LayoutStation>? LayoutStations;
    IEnumerable<LayoutModule>? LayoutModules;
    bool IsOrganiser;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Layout = await LayoutService.GetLayoutAsync(Principal, Id);
        if (Layout is not null)
        {
            Meeting = Layout.Meeting;
            IsOrganiser = await MeetingService.IsMeetingOrganiser(Principal, Meeting);
            LayoutParticipants = await LayoutParticipantService.GetAllForLayout(Principal, Id);
            if (LayoutParticipants.Any())
            {
                LayoutModules = LayoutParticipants is null ? [] : LayoutParticipants.SelectMany(lp => lp.LayoutModules).ToList();
                LayoutStations = LayoutParticipants is null ? [] : LayoutParticipants.SelectMany(lp => lp.LayoutStations).ToList();
            }
        }
    }
    string PageHeadingText => $"{Localizer["RegisteredModules"]} {Layout?.DescriptionWithTheme()}";

    string WaybillsHref(LayoutModule it) => $"reports/waybills/layout/{it.LayoutParticipant.LayoutId}/station/{LayoutStation(it.LayoutStationId)?.StationId}";

    LayoutStation? LayoutStation(int? id) => id is null || LayoutStations is null ? null : LayoutStations.SingleOrDefault(ls => ls.Id == id);

    async Task NavigateToNewTab(LayoutModule it)
    {
        await JSRuntime.InvokeAsync<object>("open", WaybillsHref(it), "_blank");
    }


}
