@page "/Modules/Index"
@page "/Modules/Country/{CountryId:int}"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject ILocalStorageService LocalStorage
@inject NavigationManager Navigator

@inject ModuleService ModuleService
@inject CountryService CountryService
@inject ScaleService ScaleService


<PageHeading ObjectName="Modules" IconClass="@FontAwesome.Modules" PageAction="@PageAction.List" />
<ListboxSelector OnSelected="OnSelectedCountry" Items="Countries" ItemType="Country" IsVisible="IsSelectCountryVisible" SelectedId=CountryId Inline="true" LocalStorageKey="Country" />
@if (Filter.HasFilter)
{
    <span style="padding-left: 20px">@Localizer["Filter"]: @Filter.ToString()</span>
    <span><AppButton Label="ClearFilter" OnClickCallback="OnClearFilter" /></span>
}
<hr />

<div class="grid" tabindex="-1">
    <QuickGrid Items="FilteredModules" Virtualize="true" Pagination="PaginationState">
        <PropertyColumn Title="@Localizer["Scale"]" Property="p => p.Scale.Display()" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="Filter.Scale" @bind:event="oninput" placeholder="@Localizer["Scale"]" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Title="@Localizer["Name"]" Property="p => p.NameOrStationNameWithSignature()" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="Filter.ModuleName" @bind:event="oninput" placeholder="@Localizer["Name"]" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <TemplateColumn Context="module" Title="@Localizer["Description"]"> 
            <span>@module.Description(true)</span>
        </TemplateColumn>
        <TemplateColumn Context="module" Title="@Localizer["Status"]" Align="Align.Center">
            <span>@module.StatusIcon()</span>
        </TemplateColumn>
        <PropertyColumn Title="@Localizer["Owners"]" Property="p => p.OwnerNames()" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="Filter.OwnerName" @bind:event="oninput" placeholder="@Localizer["Owners"]" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        @if (Principal.IsGlobalOrCountryAdministrator(CountryOrDefaultId))
        {
            <TemplateColumn Context="module" Title="@Localizer["Actions"]">
                <AppButton Label="Edit" IconName="@FontAwesome.Module" Href="@EditModuleHref(module)" IsDisabled="(!MayEdit(module))" />
                @if (module.IsPrimaryStationModule())
                {
                    <AppButton Label="Edit" IconName="@FontAwesome.Station" Href="@EditStationHref(module)" IsDisabled="(!MayEdit(module))" />
                    @if (module.Station.HasCargoCustomers == true)
                    {
                        <AppButton Label="Edit" IconName="@FontAwesome.Customer" Href="@EditStationCustomersHref(module)" IsDisabled="(!MayEdit(module))" />
                    }
                }
            </TemplateColumn>
        }
    </QuickGrid>
</div>
<Paginator State="PaginationState" />

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int CountryId { get; set; }
    int CountryOrDefaultId => CountryId > 0 ? CountryId : Filter.CountryId > 0 ? Filter.CountryId : Principal.CountryId();

    private ClaimsPrincipal? Principal;
    private IEnumerable<Module>? Modules;
    PaginationState PaginationState = new() { ItemsPerPage = 20 };
    private ModulesFilter Filter = new();
    private IEnumerable<ListboxItem>? Countries;
    private IEnumerable<ListboxItem>? Scales;

    private void OnSelectedCountry(int id)
    {
        if (id > 0)
        {
            CountryId = id;
            OnFilterChanged();
            Navigator.NavigateTo($"/Modules/Country/{CountryId}");
        }
    }

    private bool IsSelectCountryVisible => Countries is not null && Countries.Count() > 1;
    private bool MayEdit(Module module) => Principal.IsGlobalOrCountryAdministrator(CountryOrDefaultId) || module.OwningPersonsIds().Contains(Principal.PersonId());


    protected async override Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Countries = await CountryService.ListboxItemsAsync(Principal);
        Scales = await ScaleService.ListboxItemsAsync(Principal);
    }

    protected override async Task OnParametersSetAsync()
    {
        Modules = await ModuleService.GetAllInCountryAsync(Principal, CountryOrDefaultId);
    }

    private void OnFilterChanged()
    {
        LocalStorage.SetItemAsync(nameof(ModulesFilter), Filter);
    }

    void OnClearFilter()
    {
        Filter.Clear();
        OnFilterChanged();
    }
    IQueryable<Module> FilteredModules =>
        Modules is null ? Enumerable.Empty<Module>().AsQueryable() :
        Modules.AsQueryable()
    .Where(m =>
            m.Scale.Display().ContainsCaseInsensitive(Filter.Scale) &&
            m.FullName.ContainsCaseInsensitive(Filter.ModuleName) &&
            m.OwnerNames().ContainsCaseInsensitive(Filter.OwnerName)
        );

    string EditModuleHref(Module? module) =>
        module is null ? string.Empty :
        module.IsGroupOwned() ? $"/Modules/{module.Id}/Edit/GroupOwned/{module.OwningGroupId()}" :
        $"/Modules/{module.Id}/Edit/PersonOwned/{module.OwningPersonsIds()[0]}";

    string EditStationHref(Module? module) =>
        module is null || module.StationId < 1 ? string.Empty :
        module.IsGroupOwned() ? $"/Stations/{module.StationId}/Edit/GroupOwned/{module.OwningGroupId()}" :
        $"/Stations/{module.StationId}/Edit/PersonOwned/{module.OwningPersonsIds()[0]}";

    string EditStationCustomersHref(Module? module) =>
    module is null || module.StationId < 1 ? string.Empty :
    module.IsGroupOwned() ? $"/Stations/{module.StationId}/Customers/GroupOwned/{module.OwningGroupId()}" :
    $"/Stations/{module.StationId}/Customers/PersonOwned/{module.OwningPersonsIds()[0]}";




}
