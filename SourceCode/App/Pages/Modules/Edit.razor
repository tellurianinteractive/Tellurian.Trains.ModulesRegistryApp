@page "/Modules/{id:int}/Edit/PersonOwned/{PersonId:int}"
@page "/Modules/{id:int}/Edit/GroupOwned/{GroupId:int}"
@page "/Modules/{id:int}/Edit/PersonOwned/{PersonId:int}/InGroup/{GroupId:int}"

@using System.Diagnostics.CodeAnalysis
@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject PersonService PersonService
@inject GroupService GroupService
@inject ModuleService ModuleService
@inject ScaleService ScaleService
@inject StationService StationService
@inject ModuleStandardService ModuleStandardService

<PageHeading ObjectName="Module" Context="@Module" IconClass="@FontAwesome.Module" PageAction="@Id.ToAddOrEditPageAction()" HelpContext="Module" />

@if (Module is null)
{

}
else
{
    <EditTemplate Item="Module" OnValidSubmit="OnValidSubmit">
        <Inputs>
            <AppInputSelect Width="3" Label="Standard&Scale" @bind-Value="Module.StandardId" Items="ModuleStandardItems" ShowPleaseSelect="true" />
            <AppInputText Width="4" Label="Name" @bind-Value="Module.FullName" />
            <AppInputText Width="1" Label="ConfigurationLabel" @bind-Value="Module.ConfigurationLabel" IsDisabled="Module.PackageLabel.HasValue()" />
            <AppInputText Width="1" Label="PackageLabel" @bind-Value="Module.PackageLabel" IsDisabled="Module.ConfigurationLabel.HasValue()" />
            <AppInputNumber Width="1" Label="FremoNumber" @bind-Value="Module.FremoNumber" />
            <AppInputNumber Width="2" Label="NumberOfSections" @bind-Value="Module.NumberOfSections" />

            <AppInputSelect Width="2" Label="Visibility" @bind-Value="Module.ObjectVisibilityId" Items="EnumExtensions.ObjectVisibilityListboxItems()" ShowPleaseSelect="false" />
            <AppInputSelect Width="2" Label="FunctionalState" @bind-Value="Module.FunctionalState" Items="EnumExtensions.ModuleFunctionalStateListboxItems()" ShowPleaseSelect="true" />
            <AppInputSelect Width="2" Label="LandscapeState" @bind-Value="Module.LandscapeState" Items="EnumExtensions.ModuleLandscapeStateListboxItems()" ShowPleaseSelect="true" />
            <AppInputSelect Width="2" Label="LandscapeSeason" @bind-Value="Module.LandscapeSeason" Items="EnumExtensions.LandscapeSeasonListboxItems()" ShowPleaseSelect="true" />
            <AppInputSelect Width="2" Label="SignalFeature" @bind-Value="Module.SignalFeature" Items="EnumExtensions.SignalFeatureListboxItems()" ShowPleaseSelect="false" />
            <AppInputSelect Width="2" Label="OverheadLineFeature" @bind-Value="Module.OverheadLineFeature" Items="EnumExtensions.OverheadLineFeatureListboxItems()" ShowPleaseSelect="false" />

            <AppInputSelectNullable Width="4" Label="IsStationOrPartOf" @bind-Value="Module.StationId" Items="StationItems" ShowNoneOption="true" />
            <AppInputNumber Width="2" Label="RepresentsFromYear" @bind-Value="Module.RepresentsFromYear" />
            <AppInputNumber Width="2" Label="RepresentsToYear" @bind-Value="Module.RepresentsUptoYear" />
            <AppInputText Width="4" Label="ThemeNote" @bind-Value="Module.Theme" />

            <AppInputNumber Width="1" Label="Radius" @bind-Value="Module.Radius" Unit="mm" OnChangedValue="UpdateLength" />
            <AppInputNumber Width="1" Label="Angle" @bind-Value="Module.Angle" Unit="°" Step=".1" OnChangedValue="UpdateLength" />
            <AppInputNumber Width="1" Label="Straight" @bind-Value="Module.Straight" Unit="mm" Step="1" OnChangedValue="UpdateLength" />
            <AppInputNumber Width="1" Label="Length" @bind-Value="Module.Length" Unit="mm" Step="1" IsDisabled="true" />
            <AppInputNumber Width="1" Label="Width" @bind-Value="Module.Width" Unit="mm" Step="1" />
            <AppInputNumber Width="2" Label="MaxSpeed" @bind-Value="Module.SpeedLimit" Unit="km/h" Step="5" />
            <AppInputNumber Width="2" Label="NumberOfThroughTracks" @bind-Value="Module.NumberOfThroughTracks" />
            <AppInputFill Width="3" />

            <AppInputCheck Width="2" Label="IsUnavailable" @bind-Value="Module.IsUnavailable" />
            <AppInputCheck Width="2" Label="IsStandAlone" @bind-Value="Module.IsStandAlone" />
            <AppInputCheck Width="2" Label="IsTurntable" @bind-Value="Module.IsTurntable" />
            <AppInputCheck Width="2" Label="IsDuckunder" @bind-Value="Module.IsDuckunder" />
            <AppInputCheck Width="2" Label="IsSignalModule" @bind-Value="Module.IsSignalModule" />
            <AppInputCheck Width="2" Label="IsEndProfileSwitcher" @bind-Value="Module.IsEndProfileSwitcher" />
            <AppInputCheck Width="2" Label="IsEndOfLine" @bind-Value="Module.IsEndOfLine" />
            <AppInputCheck Width="2" Label="HasNormalGauge" @bind-Value="Module.HasNormalGauge" />
            <AppInputCheck Width="2" Label="HasNarrowGauge" @bind-Value="Module.HasNarrowGauge" />
            <AppInputCheck Width="2" Label="HasIntegratedLocoNet" @bind-Value="Module.HasIntegratedLocoNet" />
            <AppInputCheck Width="2" Label="Is2R" @bind-Value="Module.Is2R" IsVisible="Show2RAnd3R" />
            <AppInputCheck Width="2" Label="Is3R" @bind-Value="Module.Is3R" IsVisible="Show2RAnd3R" />

            <AppInputText Width="12" Label="Note" @bind-Value="Module.Note" />

            <ModuleExitsEdit Module="Module" />
        </Inputs>
        <Buttons>
            @if (Module.StationId.HasValue)
            {
                <AppButton Label="@Localizer.EditObject("OperationLocation")" Href="@StationEditLink" IconName="@FontAwesome.Station" />
            }
            else if (Module.Id > 0)
            {
                <AppButton Label="@Localizer["MakeAsOperationsLocation"]" Href="@StationMakeLink" IconName="@FontAwesome.Station" />
            }
        </Buttons>
    </EditTemplate>
    @if (Id > 0)
    {
        <DocumentsUpload DocumentedObject="Module">
            <Uploads>
                <DocumentUpload FileExtension="pdf" DocumentedObject="Module" Label="Documentation" MaxFileSizeKb="500" OnUpdatedAsync="OnDocumentUpdated" />
                <DocumentUpload FileExtension="dwg" DocumentedObject="Module" Label="Drawing" MaxFileSizeKb="500" OnUpdatedAsync="OnDocumentUpdated" />
                @if (Principal.MayUploadSkpDrawing())
                {
                    <DocumentUpload FileExtension="skp" DocumentedObject="Module" Label="Drawing" MaxFileSizeKb="500" OnUpdatedAsync="OnDocumentUpdated" />
                }
            </Uploads>
        </DocumentsUpload>
    }
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public int GroupId { get; set; }
    [Parameter] public int PersonId { get; set; }
    ClaimsPrincipal? Principal;
    Person? OwningPerson;
    Group? OwningGroup;
    Module? Module;
    ModuleOwnershipRef OwnershipRef = ModuleOwnershipRef.None;
    IEnumerable<ListboxItem>? ScaleItems;
    IEnumerable<ListboxItem>? ModuleStandardItems;
    IEnumerable<ListboxItem>? StationItems;

    int? ScaleIdFor3R;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (Principal is not null)
        {
            OwnershipRef = ModuleOwnershipRef.Any(Principal, PersonId, GroupId);
            if (OwnershipRef.IsPerson || OwnershipRef.IsPersonInGroup)
                OwningPerson = await PersonService.FindByIdAsync(Principal, PersonId);
            else if (OwnershipRef.IsGroup)
                OwningGroup = await GroupService.FindByIdAsync(Principal, GroupId);
            ScaleItems = await ScaleService.ListboxItemsAsync(Principal);
            ScaleIdFor3R = ScaleItems.SingleOrDefault(i => i.Description.Contains("H0"))?.Id;
            ModuleStandardItems = await ModuleStandardService.GetStandardsListboxItemsAsync(Principal);
            StationItems = await StationService.StationItemsAsync(Principal, OwnershipRef);
            Module = Id > 0 ? await ModuleService.FindByIdAsync(Principal, Id, OwnershipRef) : new Module() { Is2R = true, HasNormalGauge = true, NumberOfThroughTracks = 1, Length = 1000, ObjectVisibilityId = (int)ObjectVisibility.GroupMembers };
        }
    }

    private async Task OnValidSubmit()
    {
        if (Module is not null)
        {
            Module.Length = Module.TotalLength();
            Module.ModuleExits = Module.ModuleExits.Where(mg => mg.EndProfileId > 0 && mg.Label.Length > 0).ToList(); // Fix because validation not works as expected.
            var result = await ModuleService.SaveAsync(Principal, Module, OwnershipRef);
            Module = result.Entity;
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
    }

    private async Task OnDocumentUpdated()
    {
        Module = await ModuleService.FindByIdAsync(Principal, Id, OwnershipRef);
    }

    void UpdateLength()
    {
        if (Module is not null) Module.Length = Module.TotalLength();
    }

    object? Owner => OwningGroup is not null ? OwningGroup : OwningPerson;
    private string Heading => Localizer.HeadingText(null, "Module", OwningGroup is null ? OwningPerson : OwningGroup, Id.ToAddOrEditPageAction());

    bool HasStation([NotNullWhen(true)] Module? module) => module is not null && module.StationId.HasValue;

    bool Show2RAnd3R => Module is not null && (ScaleIdFor3R is null || ScaleIdFor3R == Module.ScaleId);

    string StationEditLink => HasStation(Module) && Module.StationId.HasValue ?
        OwnershipRef.Href("Stations", Module.StationId.Value, "Edit") :
        "";

    string StationMakeLink =>
        Module is null ? string.Empty :
        OwnershipRef.IsGroup ? $"Stations/Create/{Module.Id}/GroupOwned/{OwnershipRef.GroupId}" :
        $"Stations/Create/{Module.Id}/PersonOwned/{OwnershipRef.PersonId}";
}
