@page "/Throttles/{id:int}/Edit"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject NavigationManager Navigator
@inject WiFredThrottleService ThrottleService
@inject PersonService PersonService
@inject CountryService CountryService

<PageHeading ObjectName="WiFredThrottle" IconClass="@FontAwesome.Wifi" PageAction="@Id.ToAddOrEditPageAction()" HelpContext="WiFredThrottles" ShowHelpInitially=ShowHelpInitially />

@if (Throttle is null)
{
    if (NotFound)
    {
        <ActionMessage Label="NoRecordsToDisplay" AlertType="Warning" />
    }
}
else
{
    <ListboxSelector OnSelected="OnSelectedCountry" Items="Countries" ItemType="Country" IsVisible="IsSelectCountryVisible" SelectedId=CountryId />

    <EditTemplate Item="Throttle" OnValidSubmit="OnValidSubmit">
        <Inputs>
            <AppInputSelect Width="4" Label="Owner" Items="Owners" ShowPleaseSelect=ShowPleaseSelect @bind-Value=Throttle.OwningPersonId />
            <AppInputText Width="3" Label="MacAddress" Placeholder="xx:xx:xx:xx:xx:xx" @bind-Value="Throttle.MacAddress" IsDisabled=Throttle.IsMacAddressLocked() />
            <AppInputText Width="3" Label="Name" @bind-Value="Throttle.Name" />
            <AppInputNumber Width="1" Label="InventoryNumber" @bind-Value=Throttle.InventoryNumber />
            <AppInputFill Width="1" />
            <AppInputNumber Width="2" Label="DccAddress1" @bind-Value=Throttle.LocoAddress1 />
            <AppInputNumber Width="2" Label="DccAddress2" @bind-Value=Throttle.LocoAddress2 />
            <AppInputNumber Width="2" Label="DccAddress3" @bind-Value=Throttle.LocoAddress3 />
            <AppInputNumber Width="2" Label="DccAddress4" @bind-Value=Throttle.LocoAddress4 />
        </Inputs>
    </EditTemplate>
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }

    private ClaimsPrincipal? Principal;
    private WiFredThrottle? Throttle;
    private IEnumerable<ListboxItem>? Owners;
    private IEnumerable<ListboxItem>? Countries;
    private int CountryId;
    private bool NotFound;


    protected async override Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
    }

    protected async override Task OnParametersSetAsync()
    {
        Throttle = Id > 0 ? await ThrottleService.FindById(Principal, Id) : new WiFredThrottle() { OwningPersonId = Principal.PersonId() };
        if (IsSelectCountryVisible)
        {
            Countries = await CountryService.ListboxItemsAsync(Principal, allCountries: true);
            CountryId = Principal.CountryId();
            await OnSelectedCountry(CountryId);
        }
        else if (Throttle?.Id > 0 == true)
        {
            Owners = new List<ListboxItem>() { new ListboxItem(Throttle.OwningPersonId, Throttle.OwningPerson.NameWithCityAndCountry()) };
        }
        else if (Id == 0)
        {
            Owners = await PersonService.FremoMembersListboxItemsAsync(Principal, personId: Principal.PersonId());
        }
        else
        {
            NotFound = true;
        }
    }

    private async Task OnValidSubmit()
    {
        if (Principal is null || Throttle is null) return;
        var result = await ThrottleService.SaveAsync(Principal, Throttle);
        if (result.Count == 1) Throttle = result.Entity;
        ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
    }

    private async Task OnSelectedCountry(int id)
    {
        CountryId = id;
        Owners = await PersonService.FremoMembersListboxItemsAsync(Principal, countryId: id);
    }

    bool ShowPleaseSelect => Owners is not null && Owners.Count() > 0;
    bool IsSelectCountryVisible => Principal.MayManageWiFreds();
    bool ShowHelpInitially => !NotFound;
}
