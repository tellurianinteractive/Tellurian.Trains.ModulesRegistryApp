@page "/Throttles"
@page "/Throttles/{personId:int}"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject NavigationManager Navigator
@inject WiFredThrottleService ThrottleService

<PageHeading ObjectName="WiFredThrottles" IconClass="@FontAwesome.Wifi" PageAction="PageAction.List" ShowHelpInitially="false" />


<div class="col-12">
    @if (OnlyMyThrottles && Throttles?.Any() == true)
    {
        <AppButton Label="Preview" Href="@PreviewHref(0)" />
    }
    <AppButton Label="Add" Href="@EditHref(0)" />
    @if (HasFilter)
    {
        <AppButton Label="RemoveFiltering" IconName="@FontAwesome.Erase" OnClickCallback="RemoveFilter" />
    }
</div>

<div class="grid" tabindex="-1">
    <QuickGrid Items="@FilteredItems" Virtualize="true" Pagination="PaginationState">
        <PropertyColumn Property="@(c => c.MacAddress)" Sortable="true" Title="@Localizer["MacAddress"]">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="MacFilter" @bind:event="oninput" placeholder="@Localizer["MacAddress"]" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(c => c.Name)" Sortable="true" Title="@Localizer["Name"]" />
        <PropertyColumn Property="@(c => c.BarcodeId())" Title="@Localizer["BarcodeId"]" Align="Align.Center" />
        @if (!OnlyMyThrottles)
        {
            <PropertyColumn Property="@(c => c.OwningPerson.NameWithCityAndCountry())" Title="@Localizer["Owner"]">
                <ColumnOptions>
                    <div class="search-box">
                        <input type="search" autofocus @bind="NameFilter" @bind:event="oninput" placeholder="@Localizer["Name"]" />
                    </div>
                </ColumnOptions>
            </PropertyColumn>
        }
        <PropertyColumn Property="@(c => c.DccAddresses())" Title="@Localizer["DccAddress"]" />
        <PropertyColumn Property="@(c => c.ValidationDateTime.DateAndTime() )" Title="@Localizer["Validated"]" Align="Align.Center" />
        @if (!OnlyMyThrottles)
        {
            <PropertyColumn Property="@(c => c.DeletedDateTime.DateAndTime() )" Title="@Localizer["Deleted"]" Align="Align.Center" />
        }
        <TemplateColumn Title="@Localizer["Actions"]" Context="throttle">
            @if (MayEditThrottle(throttle))
            {
                <AppButton Label="Edit" Href="@EditHref(throttle.Id)" />
            }
            @if (MayValidateThrottle(throttle))
            {
                <AppButton Label="Validate" OnClickCallback="@( async () => await OnVerify(throttle.Id))" />
            }
            @if (DeleteConfirm(throttle))
            {
                <AppButton Label="ConfirmDelete" OnClickCallback="@( async () => await ConfirmDelete(throttle.Id))" />
            }
            else if (MayDelete(throttle))
            {
                <AppButton Label="Delete" OnClickCallback="@(() => OnDelete(throttle.Id))" />
            }
        </TemplateColumn>
    </QuickGrid>
</div>
<Paginator State="@PaginationState">

</Paginator>




@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int PersonId { get; set; }
    ClaimsPrincipal? Principal;
    IEnumerable<WiFredThrottle>? Throttles;

    IQueryable<WiFredThrottle> FilteredItems
    {
        get
        {
            if (Throttles is null) return Enumerable.Empty<WiFredThrottle>().AsQueryable();
            return Throttles.AsQueryable()
                .Where(c => (
                    MacFilter.HasNoValue() || c.MacAddress.StartsWith(MacFilter)) &&
                    NameFilter.HasNoValue() ||
                        c.OwningPerson.FirstName.StartsWith(NameFilter!, StringComparison.CurrentCultureIgnoreCase) ||
                        c.OwningPerson.LastName.StartsWith(NameFilter!, StringComparison.CurrentCultureIgnoreCase));
        }
    }

    PaginationState PaginationState = new() { ItemsPerPage = 20 };
    string? MacFilter;
    string? NameFilter;
    bool HasFilter => MacFilter.HasValue() || NameFilter.HasValue();
    int DeleteId = 0;

    void RemoveFilter()
    {
        MacFilter = default;
        NameFilter = default;
        StateHasChanged();
    }

    protected async override Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetThrottles();

    }

    private async Task OnVerify(int throttleId)
    {
        var result = await ThrottleService.SetVerified(Principal, throttleId);
        await GetThrottles();
        ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);

    }

    private void OnDelete(int throttleId)
    {
        DeleteId = throttleId;
    }

    private async Task ConfirmDelete(int throttleId)
    {
        if (DeleteId == throttleId)
        {
            var result = await ThrottleService.DeleteAsync(Principal, throttleId);
            await GetThrottles();
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
        DeleteId = 0;
    }

    private async Task GetThrottles()
    {
        Throttles = await ThrottleService.GetThrottles(Principal, OnlyMyThrottles);
    }


    bool OnlyMyThrottles => PersonId > 0;
    bool MayEditThrottle(WiFredThrottle throttle) => throttle.OwningPersonId == Principal.PersonId() || Principal.MayManageWiFreds();
    bool MayValidateThrottle(WiFredThrottle throttle) => !throttle.ValidationDateTime.HasValue && Principal.MayManageWiFreds();
    bool MayDelete(WiFredThrottle thottle) => thottle.OwningPersonId == Principal.PersonId() || Principal.MayManageWiFreds();
    bool DeleteConfirm(WiFredThrottle throttle) => DeleteId == throttle.Id;

    string EditHref(int id) => $"Throttles/{id}/Edit";
    string PreviewHref(int id) => $"Throttles/My/Preview";
}
