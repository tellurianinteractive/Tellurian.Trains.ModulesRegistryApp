@page "/vehicles/"
@page "/Vehicles/country/{CountryId:int}"
@page "/vehicles/my"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject NavigationManager Navigator
@inject VehicleService VehicleService
@inject CountryService CountryService
@inject AppService AppService

<PageHeading Label="@Label" IconClass="@FontAwesome.Train" PageAction="@PageAction.List"></PageHeading>

<ListboxSelector OnSelected="OnSelectedCountry" Items="Countries" ItemType="Country" IsVisible="IsSelectCountryVisible" SelectedId=CountryId />

@if (MayEdit)
{
    <AppButton Href="@AddHref" Label="Add" />
}
<hr />
<QuickGrid Items="FilteredVehicles" Virtualize="true" Pagination="PaginationState">
    <PropertyColumn Title="@Localizer["InventoryNumber"]" Property="v => v.InventoryNumber" Sortable="true" />
    <PropertyColumn Title="@Localizer["PrototypeInfo"]" Property="v => v.PrototypeInfo()" Sortable="true" />
    <PropertyColumn Title="@Localizer["ModelInfo"]" Property="v => v.ModelInfo()" Sortable="true" />
    <PropertyColumn Title="@Localizer["Scale"]" Property="v => v.Scale.Display()" Sortable="true" />
    <TemplateColumn Title="@Localizer["Features"]" Context="vehicle">
        @vehicle.Features(Localizer)
    </TemplateColumn>
    @if (!IsMyVehiclesPage)
    {
        <PropertyColumn Title="@Localizer["Owner"]" Property="v => v.OwningPerson.Name()" Sortable="true" />
    }
    <TemplateColumn Title="@Localizer["Actions"]" Context="vehicle">
        @if (MayEdit)
        {
            <AppButton Href="@EditHref(vehicle)" Label="Edit" />
        }
    </TemplateColumn>

</QuickGrid>
<Paginator State="PaginationState" />

@code {
    [CascadingParameter] private Task<AuthenticationState>? authenticationStateTask { get; set; }
    [Parameter] public int CountryId { get; set; }

    ClaimsPrincipal? Principal;
    IEnumerable<Vehicle>? Vehicles;
    IQueryable<Vehicle> FilteredVehicles => Vehicles is null ? Enumerable.Empty<Vehicle>().AsQueryable() : Vehicles.AsQueryable();
    IEnumerable<ListboxItem>? Countries;

    bool MayEdit;
    bool IsMyVehiclesPage;
    PaginationState PaginationState = new() { ItemsPerPage = 30 };

    protected override async Task OnInitializedAsync()
    {
        Principal = await authenticationStateTask.GetClaimsPrincipalAsync();
        Countries = await CountryService.ListboxItemsAsync(Principal);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CountryId == 0) CountryId = Principal.CountryId();
        MayEdit = Principal.IsAuthenticated();
        IsMyVehiclesPage = Navigator.Uri.Contains("My");
        if (IsMyVehiclesPage)
        {
            Vehicles = await VehicleService.GetPersonsOwnedVehiclesAsync(Principal, Principal.PersonId());
        }
        else
        {
            Vehicles = await VehicleService.GetVehiclesByOwnerCountryAsync(Principal, CountryId);
        }
    }

    private void OnSelectedCountry(int id)
    {
        if (id > 0)
        {
            AppService.LastCountryId = id;
            Navigator.NavigateTo($"/Vehicles/Country/{id}");
        }
    }

    string Label => IsMyVehiclesPage ? "MyVehicles" : "Vehicles";

    string EditHref(Vehicle vehicle) => IsMyVehiclesPage ? $"/vehicles/my/{vehicle.Id}" : $"/vehicles/{vehicle.Id}/country/{CountryId}/edit";
    string AddHref => IsMyVehiclesPage ? "/vehicles/my/0" : $"vehicles/0/country/{CountryId}/edit";
    bool IsSelectCountryVisible => !IsMyVehiclesPage && (Principal.IsGlobalAdministrator() || Principal.IsCountryAdministratorInCountry(CountryId));
}
