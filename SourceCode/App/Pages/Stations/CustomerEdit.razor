@page "/Stations/{StationId:int}/Customers/{id:int}/Edit"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject PageHistory PageHistory

@inject StationService StationService
@inject StationCustomerService StationCustomerService

@inject OperatingDayService OperatingDayService
@inject CargoService CargoService

<PageHeading Label="FreightCustomer" Context="StationCustomer" IconClass="@FontAwesome.Customer" PageAction="@Id.ToAddOrEditPageAction()" HelpContext="StationCustomer" />

@if (DeleteDialogOpen)
{
    <AppModalDialog Title="@DeleteTitle"
                 Text="@Localizer["ClickOKToDelete"]"
                 OnClose="@OnDeleteDialogClose">
    </AppModalDialog>
}

<EditTemplate Item="StationCustomer" OnValidSubmit="OnValidSubmit" ShowSaveButton="true">
    <Inputs>
        <AppInputText Width="4" @bind-Value="StationCustomer.CustomerName" Label="Name" />
        <AppInputText Width="8" @bind-Value="StationCustomer.Comment" Label="Comment" />
        <AppInputText Width="3" @bind-Value="StationCustomer.TrackOrArea" Label="TrackOrArea" BackColor="@StationCustomer.TrackOrAreaColor" TextColor="@StationCustomer.TrackOrAreaColor.TextColor()" />
        <AppInputColor Width="3" @bind-Value="StationCustomer.TrackOrAreaColor" Label="Color" />
        <AppInputNumber Width="2" @bind-Value="StationCustomer.OpenedYear" Label="OpenedYear" />
        <AppInputNumber Width="2" @bind-Value="StationCustomer.ClosedYear" Label="ClosedYear" />
    </Inputs>
    <Buttons>
        @if (StationCustomer.Id > 0)
        {
            <AppButton Label="Delete" OnClickCallback="( () => OpenDeleteDialog(StationCustomer.Id))"/>
        }
    </Buttons>
    <SubInputs>
        <CustomerCargoesEdit Customer="StationCustomer" CargoTypeItems="CargoTypeItems" DirectionItems="DirectionItems" OperatingDayItems="OperatingDayItems" QuantityUnitItems="QuantityUnitItems" ReadyTimeItems="ReadyTimeItems" PackagingUnitItems="PackagingUnitItems" />
    </SubInputs>
</EditTemplate>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public int StationId { get; set; }

    ClaimsPrincipal? Principal;
    Station? Station;
    StationCustomer StationCustomer = new StationCustomer();
    IEnumerable<ListboxItem>? OperatingDayItems;
    IEnumerable<ListboxItem>? CargoTypeItems;
    IEnumerable<ListboxItem>? DirectionItems;
    IEnumerable<ListboxItem>? QuantityUnitItems;
    IEnumerable<ListboxItem>? ReadyTimeItems;
    IEnumerable<ListboxItem>? PackagingUnitItems;

    bool DeleteDialogOpen { get; set; }
    int DeletedId;
    string DeleteTitle => $"{Localizer["Delete"]} {StationCustomer?.CustomerName}?";

    protected override async Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        CargoTypeItems = await CargoService.CargoListboxItemsAsync(Principal);
        DirectionItems = await CargoService.CargoDirectionsListboxItemsAsync(Principal);
        OperatingDayItems = await OperatingDayService.AllDaysItemsAsync();
        QuantityUnitItems = await CargoService.CargoQuantityListboxItemsAsync(Principal);
        ReadyTimeItems = await CargoService.ReadyTimeListboxItemsAsync(Principal);
        PackagingUnitItems = await CargoService.CargoPackagingUnitListboxItemsAsync(Principal);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (StationId > 0)
        {
            Station = await StationService.FindByIdAsync(Principal, StationId);
            StationCustomer = Id > 0 ? await StationCustomerService.FindByIdAsync(Principal, Id) ?? Default : Default;
        }
    }

    async Task OnValidSubmit()
    {
        if (StationId > 0 && StationCustomer is not null)
        {
            var result = await StationCustomerService.SaveAsync(Principal, StationId, StationCustomer);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
    }

    private void OpenDeleteDialog(int id)
    {
        DeletedId = id;
        DeleteDialogOpen = true;
        StateHasChanged();
    }

    private async Task OnDeleteDialogClose(bool accepted)
    {
        DeleteDialogOpen = false;
        if (accepted && DeletedId > 0)
        {
            Station = null;
            StationCustomer = Default;
            var result = await StationCustomerService.DeleteAsync(Principal, DeletedId);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
            await Task.Delay(3000);
            PageHistory.NavigateBack();
        }
        StateHasChanged();
    }

    private StationCustomer Default => new StationCustomer
    {
        StationId = StationId,
        TrackOrAreaColor = "#FFFFFF"
    };
}
