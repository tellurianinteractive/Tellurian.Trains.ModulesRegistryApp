@page "/admin/users"
@page "/admin/users/country/{CountryId:int}"
@using System.Net.Mail

@attribute [Authorize(Policy = "Admin")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject NavigationManager Navigator
@inject CountryService CountryService
@inject UserService UserService
@inject PersonService PersonService
@inject AppService AppService
@inject IMailSender MailSender

<PageHeading Label="UserAdministration" IconClass="@FontAwesome.User" PageAction="@PageAction.Tools" />

<ListboxSelector OnSelected="OnSelectedCountry" Items="CountryListItems" ItemType="Country" IsVisible="true" SelectedId=CountryId />


@if (PeopleWithUserAccount.Any())
{
    <div style="padding: 5px 0px;">
        <h3>@(string.Format(Localizer["SendMailToAllUsersIn"], LanguageExtensions.GetLocalizedString(CurrentCountry?.EnglishName)))</h3>
        @foreach (var group in PeopleWithUserAccount.MailHolders().MailHrefGroups(Principal.MailHolder(), LanguageExtensions.GetLocalizedString("ModuleRegistry", Language)))
        {
            <AppButton Href="@group.Href" Label="@group.Subset" IconName="@FontAwesome.Mail" AlwaysShowLabel=true />
        }
        <span style="padding-left: 10px; font-weight: bold">@string.Format(Localizer["TotalCount"], PeopleWithUserAccount.Count())</span>
    </div>
}
@if (PeopleWithEmail.Any())
{
    <div style="padding: 5px 0px;">
        <h3>@(string.Format(Localizer["SendMailToAllWithEmailIn"], LanguageExtensions.GetLocalizedString(CurrentCountry?.EnglishName)))</h3>
        @foreach (var group in PeopleWithEmail.MailHolders().MailHrefGroups(Principal.MailHolder(), LanguageExtensions.GetLocalizedString("ModuleRegistry", Language)))
        {
            <AppButton Href="@group.Href" Label="@group.Subset" IconName="@FontAwesome.Mail" AlwaysShowLabel=true />
        }
        <span style="padding-left: 10px; font-weight: bold">@string.Format(Localizer["TotalCount"], PeopleWithEmail.Count())</span>
    </div>
}
@if (PeopleWithoutMail.Any())
{
    <h3>@(string.Format(Localizer["PeopleWithoutEmailAddressIn"], LanguageExtensions.GetLocalizedString(CurrentCountry?.EnglishName)))</h3>
    <div>
        @string.Join(", ", PeopleWithoutMail.Select(p => p.Name()))
    </div>

}
<div style="padding: 5px 0px;">
    <h3>@Localizer["SendTestMail"]</h3>
    <AppButton Label="Send" OnClickCallback="SendTestMail" IconName="@FontAwesome.Mail" AlwaysShowLabel=true />
</div>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int CountryId { get; set; }

    private ClaimsPrincipal? Principal;
    private IEnumerable<ListboxItem>? CountryListItems;
    private IEnumerable<Person>? People;
    private IEnumerable<Person> PeopleWithEmail = [];
    private IEnumerable<Person> PeopleWithoutMail = [];
    private IEnumerable<Person> PeopleWithUserAccount = [];
    private Country? CurrentCountry;

    private async Task SendTestMail()
    {
        var message = new MailMessage(new MailAddress("moduleregistry@tellurian.se", Localizer["AppName"]), new MailAddress(Principal!.EmailAddess(), Principal!.GivenName()))
        {
            Subject = "Test",
            Body = "This is a test message.",
            Sender = new MailAddress("moduleregistry@tellurian.se", Localizer["AppName"])
        };
        var result = await MailSender.SendMailMessageAsync(message);
        ToastService.ShowSuccessOrFailure(Localizer, result, "TestMail");
    }

    protected override async Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        CountryListItems = await CountryService.ListboxItemsAsync(Principal);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CountryId == 0) CountryId = Principal.CountryId();
        CurrentCountry = await CountryService.FindById(CountryId);
        if (CurrentCountry is null) return;
        People = await PersonService.GetAllInCountryAsync(Principal, CountryId);
        PeopleWithEmail = People?.Where(p => p.EmailAddresses.HasValue()) ?? [];
        PeopleWithoutMail = People?.Where(p => p.EmailAddresses.HasNoValue()) ?? [];
        PeopleWithUserAccount = People?.Where(p => p.IsActiveUser()) ?? [];
    }

    private void OnSelectedCountry(int id)
    {
        if (id > 0)
        {
            AppService.LastCountryId = id;
            Navigator.NavigateTo($"/admin/users/country/{id}");
        }
    }

    string Language => CurrentCountry is null ? "en" : CurrentCountry.Languages.Items().First();

}
