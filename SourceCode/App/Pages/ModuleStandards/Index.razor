@page "/ModuleStandards"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject ModuleStandardService ModuleStandardService

<PageHeading ObjectName="ModuleStandards" IconClass="@FontAwesome.Standard" PageAction="PageAction.List"/>

@if (Principal.IsCountryOrGlobalAdministrator() && ModuleStandards is not null)
{
    <a class="btn btn-sm btn-secondary" href="modulestandards/0/edit"><span class="@FontAwesome.Add" /> @Localizer["Add"]</a>
}

<TableTemplate Items="ModuleStandards?.OrderBy(ms => ms.Scale.Denominator)">
    <TableHeader>
        <th>@Localizer["Scale"]</th>
        <th>@Localizer["Name"]</th>
        <th>@Localizer["Theme"]</th>
        <th>@Localizer["TrackSystem"]</th>
        <th>@Localizer["ElectricSystem"]</th>
        <th>@Localizer["Couplings"]</th>
        @if (Principal.IsCountryOrGlobalAdministrator())
        {
            <th>@Localizer["Actions"]</th>

        }
    </TableHeader>
    <RowTemplate Context="standard">
        <td>@Scale(standard.Scale)</td>
        <td>@standard.ShortName</td>
        <td>@((Theme)standard.MainThemeId) @standard.PreferredTheme</td>
        <td>@standard.TrackSystem</td>
        <td>@standard.Electricity</td>
        <td>@standard.Couplings</td>
        @if (Principal.IsCountryOrGlobalAdministrator())
        {
            <td>
                <a class="btn btn-sm btn-primary" href="modulestandards/@standard.Id/edit"><span class="@FontAwesome.Edit" />@Localizer["Edit"]</a>
            </td>
        }
    </RowTemplate>
</TableTemplate>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private ClaimsPrincipal? Principal;
    private IEnumerable<ModuleStandard>? ModuleStandards;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (Principal is not null)
        {
            ModuleStandards = await ModuleStandardService.All(Principal);
        }
    }

    private string Scale(Scale it) => $"{it.ShortName} 1:{it.Denominator}";
    private string Gauge(double? it) => it.HasValue ? string.Format("{0:F1} mm", it) : string.Empty;
}
