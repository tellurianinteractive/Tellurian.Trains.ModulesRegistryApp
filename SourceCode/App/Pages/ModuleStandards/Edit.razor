@page "/ModuleStandards/{id:int}/Edit"

@attribute [Authorize(Policy = "Admin")]

@inject IStringLocalizer<App> Localizer
@inject IToastService Toast

@inject ScaleService ScaleService
@inject ModuleStandardService ModuleStandardService

<PageHeading ObjectName="ModuleStandard"  IconClass="@FontAwesome.Standard" PageAction="@Id.ToAddOrEditPageAction()" />

@if (ModuleStandard is null)
{

}
else
{
    <EditForm Model="ModuleStandard" OnValidSubmit="OnValidSubmit" Class="row g-3">
        <FluentValidationValidator />
        <ValidationSummary />
        <AppInputText Width="2" Label="ShortName" @bind-Value="ModuleStandard.ShortName" />
        <AppInputSelect Width="2" Label="Scale" @bind-Value="ModuleStandard.ScaleId" Items="ScaleItems" ShowPleaseSelect="true" />
        <AppInputSelect Width="2" Label="MainTheme" @bind-Value="ModuleStandard.MainThemeId" Items="EnumExtensions.ThemesListboxItems()" ShowPleaseSelect="true" />
        <AppInputText Width="3" Label="PreferredTheme" @bind-Value="@ModuleStandard.PreferredTheme" />
        <AppInputFill Width="5" />
        <AppInputText Width="2" Label="TrackSystem" @bind-Value="ModuleStandard.TrackSystem" />
        <AppInputNumber Width="2" Label="NormalGauge" TValue="double?" @bind-Value="ModuleStandard.NormalGauge" Format="F1" Step="0.1" Unit="mm" />
        <AppInputNumber Width="2" Label="NarrowGauge" TValue="double?" @bind-Value="ModuleStandard.NarrowGauge" Format="F1" Step="0.1" Unit="mm" />
        <AppInputText Width="4" Label="Wheelset" @bind-Value="ModuleStandard.Wheelset" />
        <AppInputText Width="3" Label="Couplings" @bind-Value="ModuleStandard.Couplings" />
        <AppInputText Width="2" Label="ElectricSystem" @bind-Value="ModuleStandard.Electricity" />
        <AppInputText Width="12" Label="AcceptedNorm" @bind-Value="ModuleStandard.AcceptedNorm" Placeholder="LinkToExternalContent" />
        <div class="col-12">
            <button type="submit" class="btn btn-primary"><span class="@FontAwesome.Save" />@Localizer["Save"]</button>
        </div>
    </EditForm>
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    ClaimsPrincipal? Principal;
    ModuleStandard? ModuleStandard;
    IEnumerable<ListboxItem>? ScaleItems;

    protected override async Task OnParametersSetAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        if (Principal is not null)
        {
            ScaleItems = await ScaleService.ListboxItemsAsync(Principal);
            ModuleStandard = Id > 0 ? await ModuleStandardService.FindByIdAsync(Principal, Id) : new ModuleStandard() { NormalGauge = 16.5 };
        }
    }

    private async Task OnValidSubmit()
    {
        if (ModuleStandard is not null)
        {
            var result = await ModuleStandardService.SaveAsync(Principal, ModuleStandard);
            ModuleStandard = result.Entity;
            Id = ModuleStandard?.Id ?? 0;
            Toast.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
    }
    private string SelectScaleLabel => $"{Localizer["Select"]} {Localizer["Scale"].Value.ToLowerInvariant()}";
}
