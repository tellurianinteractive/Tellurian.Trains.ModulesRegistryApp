@page "/ExternalStations"
@page "/ExternalStations/{regionId:int}"
@page "/ExternalStations/Region/{regionId:int}"
@page "/ExternalStations/Country/{countryId:int}"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService
@inject NavigationManager Navigator

@inject ExternalStationService ExternalStationService
@inject CountryService CountryService
@inject RegionService RegionService

<PageHeading ObjectName="ExternalStations" Context="Owner" IconClass="@FontAwesome.Station" PageAction="PageAction.List" HelpContext="ExternalStations" ShowHelpInitially="false" />

<ListboxSelector Items="CountryItems" OnSelected="OnSelectedCountry" IsVisible="CanSelectCountry" SelectedId="CountryId"/>

@if (DeleteDialogOpen)
{
    <AppModalDialog Title="@DeleteTitle"
                Text="@Localizer["ClickOKToDelete"]"
                OnClose="@OnDeleteDialogClose">
    </AppModalDialog>
}

@if (MayEdit)
{
    <AppButton Href="ExternalStations/0/Edit" Label="Add" />
}

@if (HasData)
{
    <TableTemplate Items="ExternalStations">
        <TableHeader>
            <th>@Localizer["Name"]</th>
            <th style="text-align: center">@Localizer["Signature"]</th>
            <th>@Localizer["Note"]</th>
            <th style="text-align: center">@Localizer["OpenedYear"]</th>
            <th style="text-align: center">@Localizer["ClosedYear"]</th>
            <th>@Localizer["Actions"]</th>
        </TableHeader>
        <RowTemplate Context="item">
            <td>@item.FullName</td>
            <td style="text-align: center">@item.Signature</td>
            <td>@item.Note</td>
            <td style="text-align: center">@item.OpenedYear</td>
            <td style="text-align: center">@item.ClosedYear</td>
            <td>
                <AppButton Label="FreightCustomers" IconName="@FontAwesome.Customer" Href="@FreightCustomersHref(item)" />
                @if (MayEdit)
                {
                    <AppButton Label="Edit" Href="@EditHref(item)"/>
                }
                @if (Principal.IsCountryOrGlobalAdministrator())
                {
                    <AppButton Label="Delete" OnClickCallback="() => OpenDeleteDialog(item.Id)" />
                }

        </td>
    </RowTemplate>
</TableTemplate>
}
@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int RegionId { get; set; }
    [Parameter] public int CountryId { get; set; }

    ClaimsPrincipal? Principal;
    IEnumerable<ExternalStation>? ExternalStations;
    IEnumerable<ListboxItem>? CountryItems;
    IEnumerable<ListboxItem>? RegionItems;
    Country? Country;
    Region? Region;

    string EditHref(ExternalStation station) => $"ExternalStations/{station.Id}/Edit";
    string FreightCustomersHref(ExternalStation station) => $"ExternalStations/{station.Id}/StationCustomers";

    protected override async Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        CountryItems = await CountryService.ListboxItemsAsync(Principal, true, true);
        RegionItems = await RegionService.ListboxItemsAsync(Principal, 0);
        if (CountryItems.Count() == 1) OnSelectedCountry(CountryItems.First().Id);
        if(Principal.CountryId() > 0) OnSelectedCountry(Principal.CountryId());
    }

    protected override async Task OnParametersSetAsync()
    {
        await GetCountryStations();
        await GetRegionStations();
    }

    async Task GetCountryStations()
    {
        if (CountryId > 0)
        {
            Country = await CountryService.FindById(CountryId);
            ExternalStations = await ExternalStationService.GetAllInCountry(Principal, CountryId);
        }
    }
 
    void OnSelectedCountry(int countryId)
    {
        Navigator.NavigateTo($"ExternalStations/Country/{countryId}");
    }

    async Task GetRegionStations()
    {
        if (RegionId > 0)
        {
            Region = await RegionService.FindById(Principal, RegionId);
            ExternalStations = await ExternalStationService.GetAllInRegion(Principal, RegionId);
        }
    }

    void OnSelectedRegion(int regionId)
    {
        Navigator.NavigateTo($"ExternalStations/Region{regionId}");
    }

    bool DeleteDialogOpen { get; set; }
    int DeletedId;
    string DeleteTitle => $"{Localizer["Delete"]} {ItemName(DeletedId)}?";

    private void OpenDeleteDialog(int id)
    {
        DeletedId = id;
        DeleteDialogOpen = true;
        StateHasChanged();
    }

    async Task OnDeleteDialogClose(bool accept)
    {
        if (accept && DeletedId > 0)
        {
            var result = await ExternalStationService.DeleteAsync(Principal, DeletedId);
            ExternalStations = await ExternalStationService.GetAllInRegion(Principal, RegionId);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
        DeleteDialogOpen = false;
        StateHasChanged();
    }

    object? Owner => Country is not null ? Country : Region;

    bool MayEdit => ExternalStations is not null;
    bool HasData => ExternalStations is not null && ExternalStations.Count() > 0;
    bool CanSelectCountry => CountryItems is not null && CountryItems.Count() > 1;
    string ItemName(int id) => id < 1 || ExternalStations is null ? string.Empty : ExternalStations.Single(es => es.Id == DeletedId).FullName;
}
