@page "/ExternalStations"
@page "/ExternalStations/{regionId:int}"
@page "/ExternalStations/Region/{regionId:int}"
@page "/ExternalStations/Country/{countryId:int}"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject ILocalStorageService LocalStorage
@inject IToastService ToastService
@inject NavigationManager Navigator

@inject ExternalStationService ExternalStationService
@inject CountryService CountryService
@inject RegionService RegionService

<PageHeading ObjectName="ExternalStations" Context="Owner" IconClass="@FontAwesome.Station" PageAction="PageAction.List" HelpContext="ExternalStations" ShowHelpInitially="false" />

<ListboxSelector Items="CountryItems" OnSelected="OnSelectedCountry" IsVisible="CanSelectCountry" SelectedId="CountryId" />

@if (DeleteDialogOpen)
{
    <AppModalDialog Title="@DeleteTitle"
                    Text="@Localizer["ClickOKToDelete"]"
                    OnClose="@OnDeleteDialogClose">
    </AppModalDialog>
}

@if (MayEdit)
{
    <span><AppButton Href="ExternalStations/0/Edit" Label="Add" /></span>
}

@if (Filter.HasFilter)
{
    <span style="padding-left: 20px">@Localizer["Filter"]: @Filter.ToString()</span>
}

@if (HasData)
{
    <QuickGrid Items="FilteredItems" Virtualize="true" Pagination="PaginationState">
        <PropertyColumn Property="@(es => es.FullName)" Title="@Localizer["Name"]" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="Filter.Name" @bind:event="oninput" @onchange="OnFilterChanged" />
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(es => es.Signature)" Title="@Localizer["Signature"]" Sortable="true">
            <ColumnOptions>
                <div class="search-box">
                    <input type="search" autofocus @bind="Filter.Signature" @bind:event="oninput" @onchange="OnFilterChanged"/>
                </div>
            </ColumnOptions>
        </PropertyColumn>
        <PropertyColumn Property="@(es => es.Note)" Title="@Localizer["Note"]" />
        <PropertyColumn Property="@(es => es.OpenedYear)" Title="@Localizer["OpenedYear"]" Sortable="true" />
        <PropertyColumn Property="@(es => es.ClosedYear)" Title="@Localizer["ClosedYear"]" Sortable="true" />
        <TemplateColumn Title="@Localizer["Actions"]" Context="station">
            @if (MayEdit)
            {
                <AppButton Label="Edit" Href="@EditHref(station)" />
            }
            @if (Principal.IsCountryOrGlobalAdministrator())
            {
                <AppButton Label="Delete" OnClickCallback="() => OpenDeleteDialog(station.Id)" />
            }
        </TemplateColumn>
    </QuickGrid>
}
@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int RegionId { get; set; }
    [Parameter] public int CountryId { get; set; }

    ClaimsPrincipal? Principal;
    IEnumerable<ExternalStation>? ExternalStations;
    PaginationState PaginationState = new() { ItemsPerPage = 20 };
    ExternalStationsFilter Filter = new();
    IEnumerable<ListboxItem>? CountryItems;
    IEnumerable<ListboxItem>? RegionItems;
    Country? Country;
    Region? Region;

    string EditHref(ExternalStation station) => $"ExternalStations/{station.Id}/Edit";
    string FreightCustomersHref(ExternalStation station) => $"ExternalStations/{station.Id}/StationCustomers";

    protected override async Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        CountryItems = await CountryService.ListboxItemsAsync(Principal, true, true);
        RegionItems = await RegionService.ListboxItemsAsync(Principal, 0);
        if (CountryItems.Count() == 1) OnSelectedCountry(CountryItems.First().Id);
        if (Principal.CountryId() > 0) OnSelectedCountry(Principal.CountryId());
    }

    protected override async Task OnParametersSetAsync()
    {
        Filter = await LocalStorage.GetItemAsync<ExternalStationsFilter>(nameof(ExternalStationsFilter)) ?? Filter;
        await GetCountryStations();
        await GetRegionStations();
    }

    async Task GetCountryStations()
    {
        if (CountryId > 0)
        {
            Country = await CountryService.FindById(CountryId);
            ExternalStations = await ExternalStationService.GetAsync(Principal, CountryId);
        }
    }

    void OnSelectedCountry(int countryId)
    {
        Navigator.NavigateTo($"ExternalStations/Country/{countryId}");
    }

    async Task GetRegionStations()
    {
        if (RegionId > 0)
        {
            Region = await RegionService.FindById(Principal, RegionId);
            ExternalStations = await ExternalStationService.GetAsync(Principal, 0, RegionId);
        }
    }

    void OnSelectedRegion(int regionId)
    {
        Navigator.NavigateTo($"ExternalStations/Region{regionId}");
    }

    IQueryable<ExternalStation> FilteredItems =>
        ExternalStations is null ? Enumerable.Empty<ExternalStation>().AsQueryable() :
        ExternalStations.AsQueryable()
            .Where(es => 
                es.FullName.StartsWithCaseInsensitive(Filter.Name) &&
                es.Signature.StartsWithCaseInsensitive(Filter.Signature)
            );

    void OnFilterChanged()
    {
        LocalStorage.SetItemAsync(nameof(ExternalStationsFilter), Filter);
    }

    bool DeleteDialogOpen { get; set; }
    int DeletedId;
    string DeleteTitle => $"{Localizer["Delete"]} {ItemName(DeletedId)}?";

    private void OpenDeleteDialog(int id)
    {
        DeletedId = id;
        DeleteDialogOpen = true;
        StateHasChanged();
    }

    async Task OnDeleteDialogClose(bool accept)
    {
        if (accept && DeletedId > 0)
        {
            var result = await ExternalStationService.DeleteAsync(Principal, DeletedId);
            ExternalStations = await ExternalStationService.GetAsync(Principal, 0, RegionId);
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
        DeleteDialogOpen = false;
        StateHasChanged();
    }

    object? Owner => Country is not null ? Country : Region;

    bool MayEdit => ExternalStations is not null;
    bool HasData => ExternalStations is not null && ExternalStations.Count() > 0;
    bool CanSelectCountry => CountryItems is not null && CountryItems.Count() > 1;
    string ItemName(int id) => id < 1 || ExternalStations is null ? string.Empty : ExternalStations.Single(es => es.Id == DeletedId).FullName;
}
