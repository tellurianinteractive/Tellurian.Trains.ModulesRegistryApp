@page "/ExternalStations/{stationid:int}/Customers/"
@page "/ExternalStations/{stationid:int}/Customers/{customerId:int}"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject GroupService GroupService
@inject CargoService CargoService
@inject OperatingDayService OperatingDayService
@inject StationService StationService
@inject ExternalStationService ExternalStationService

<PageHeading Label="FreightCustomers" Context="@Station" IconClass="@FontAwesome.Customer" PageAction="PageAction.List" />

@if (MayEdit)
{
    <AppButton Label="Add" Href="@FreightCustomerHref(0)" />
    <hr />
}
@if (StationCustomers is not null)
{
    @foreach (var customer in StationCustomers.OrderBy(sc => sc.CustomerName))
    {
        <ExternalStationCustomerItemView Customer="customer" MayEdit="MayEdit" CargoTypeItems="CargoTypeItems" PackagingUnitsItems="PackagingUnitsItems" DirectionItems="DirectionItems" OperatingDayItems="OperatingDayItems" QuantityUnitItems="QuantityUnitItems" ReadyTimeItems="ReadyTimeItems" />
    }
}

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public int StationId { get; set; }
    [Parameter] public int CustomerId { get; set; }

    IEnumerable<ListboxItem>? OperatingDayItems;
    IEnumerable<ListboxItem>? CargoTypeItems;
    IEnumerable<ListboxItem>? PackagingUnitsItems;
    IEnumerable<ListboxItem>? DirectionItems;
    IEnumerable<ListboxItem>? QuantityUnitItems;
    IEnumerable<ListboxItem>? ReadyTimeItems;


    ClaimsPrincipal? Principal;
    ExternalStation? Station;
    IEnumerable<ExternalStationCustomer>? StationCustomers;
    bool MayEdit = false;

    protected override async Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        CargoTypeItems = await CargoService.CargoListboxItemsAsync(Principal, includeDefaultClasses: false);
        PackagingUnitsItems = await CargoService.CargoPackagingUnitListboxItemsAsync(Principal);
        DirectionItems = await CargoService.CargoDirectionsListboxItemsAsync(Principal);
        OperatingDayItems = await OperatingDayService.AllDaysItemsAsync();
        QuantityUnitItems = await CargoService.CargoQuantityListboxItemsAsync(Principal);
        ReadyTimeItems = await CargoService.ReadyTimeListboxItemsAsync(Principal);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (StationId > 0)
        {
            Station = await ExternalStationService.FindByIdAsync(Principal, StationId);
            StationCustomers = await ExternalStationService.FindCustomersByIdAsync(Principal, StationId, CustomerId);
        }
    }

    string FreightCustomerHref(int customerId) => $"/ExternalStations/{StationId}/Customers/{customerId}/Edit";
}
