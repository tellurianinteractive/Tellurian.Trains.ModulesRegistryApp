@page "/ExternalStations/{id:int}/StationCustomers"

@inject IStringLocalizer<App> Localizer

@inject ExternalStationService ExternalStationService

<PageHeading ObjectName="FreightCustomers" Context="Station" IconClass="@FontAwesome.Customer" PageAction="PageAction.List" />
@if (MayEdit)
{
    <AppButton Label="Add" Href="@CustomerAddHref(Station)" />
}

<TableTemplate Items="Station?.ExternalStationCustomers">
    <TableHeader>
        <th>@Localizer["Name"]</th>
        <th>@Localizer["HaveFreightFlow"]</th>
        <th>@Localizer["OpenedYear"]</th>
        <th>@Localizer["ClosedYear"]</th>
        <th>@Localizer["Actions"]</th>
    </TableHeader>
    <RowTemplate Context="item">
        <td>@item.CustomerName</td>
        <td>@item.ExternalStationCustomerCargos.Any().AsYesOrNo()</td>
        <td>@item.OpenedYear</td>
        <td>@item.ClosedYear</td>
        <td>
            @if (MayEdit)
            {
                <AppButton Label="Edit" Href="@CustomerEditHref(item)" />
            }
        </td>
    </RowTemplate>
</TableTemplate>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }

    ClaimsPrincipal? Principal;

    ExternalStation? Station;

    protected override async Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
    }

    protected override async Task OnParametersSetAsync()
    {
        Station = Id > 0 ? await ExternalStationService.FindByIdAsync(Principal, Id) : null;
    }

    bool MayEdit => Station is not null && Principal.IsAuthenticated();
    string CustomerEditHref(ExternalStationCustomer customer) => $"externalstations/{customer.ExternalStation.Id}/Customers/{customer.Id}/Edit";
    string CustomerAddHref(ExternalStation? station) => station is null ? string.Empty : $"externalstations/{station.Id}/Customers/0/Edit";

}
