@page "/ExternalStations/{stationid:int}/Customers/{id:int}/Edit"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject IToastService ToastService

@inject ExternalStationService ExternalStationService
@inject OperatingDayService OperatingDayService
@inject CargoService CargoService

<PageHeading Label="FreightCustomer" Context="Station" IconClass="@FontAwesome.Customer" PageAction="@Id.ToAddOrEditPageAction()" HelpContext="ExternalStationCustomer" ShowHelpInitially="true" />

<EditTemplate Item="StationCustomer" OnValidSubmit="OnValidSubmit" ShowSaveButton="true">
    <Inputs>
        <AppInputText Width="4" @bind-Value="StationCustomer.CustomerName" Label="Name" />
        <AppInputNumber Width="2" @bind-Value="StationCustomer.OpenedYear" Label="OpenedYear" />
        <AppInputNumber Width="2" @bind-Value="StationCustomer.ClosedYear" Label="ClosedYear" />
        <ExternalCargoesEdit Customer="StationCustomer" CargoTypeItems="CargoTypeItems" DirectionItems="DirectionItems" OperatingDayItems="OperatingDayItems" QuantityUnitItems="QuantityUnitItems" PackagingUnitsItems="PackageUnitItems"/>
    </Inputs>
    <Buttons>

    </Buttons>
</EditTemplate>


@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int Id { get; set; }
    [Parameter] public int StationId { get; set; }

    ClaimsPrincipal? Principal;
    ExternalStation? Station;
    ExternalStationCustomer StationCustomer = new ExternalStationCustomer();
    IEnumerable<ListboxItem>? OperatingDayItems;
    IEnumerable<ListboxItem>? CargoTypeItems;
    IEnumerable<ListboxItem>? DirectionItems;
    IEnumerable<ListboxItem>? QuantityUnitItems;
    IEnumerable<ListboxItem>? PackageUnitItems;

    protected override async Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        CargoTypeItems = await CargoService.CargoListboxItemsAsync(Principal);
        DirectionItems = await CargoService.CargoDirectionsListboxItemsAsync(Principal);
        OperatingDayItems = await OperatingDayService.AllDaysItemsAsync();
        QuantityUnitItems = await CargoService.CargoQuantityListboxItemsAsync(Principal);
        PackageUnitItems = await CargoService.CargoPackagingUnitListboxItemsAsync(Principal);
    }

    protected override async Task OnParametersSetAsync()
    {
        if (StationId > 0)
        {
            Station = await ExternalStationService.FindByIdAsync(Principal, StationId);
            if (Station is not null)
            {
                StationCustomer = Id > 0 ? await ExternalStationService.FindCustomerByIdAsync(Principal, Id) ?? Default(Station.Id) : Default(Station.Id);
            }
        }
    }
    ExternalStationCustomer Default(int stationId) => new ExternalStationCustomer { ExternalStationId = stationId };

    async Task OnValidSubmit()
    {
        if (StationCustomer is not null)
        {
            StationCustomer.ExternalStationCustomerCargos = StationCustomer.ExternalStationCustomerCargos.Where(escc => escc.CargoId > 0).ToList(); // Removes invalid items.
            var result = await ExternalStationService.SaveAsync(Principal, StationCustomer);
            if (result.Entity is not null) StationCustomer = result.Entity;
            ToastService.ShowSuccessOrFailure(Localizer, result.Count, result.Message);
        }
    }
}
