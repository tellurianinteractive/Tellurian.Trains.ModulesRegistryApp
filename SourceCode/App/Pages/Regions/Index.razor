@page "/Regions/Index"
@page "/Regions/{countryId:int}/Index"
@page "/Regions/Country/{countryId:int}"

@attribute [Authorize(Policy = "User")]

@inject IStringLocalizer<App> Localizer
@inject NavigationManager Navigator
@inject AppService AppService
@inject RegionService RegionService
@inject CountryService CountryService


<PageHeading ObjectName="Regions" IconClass="@FontAwesome.Region" PageAction="PageAction.List" HelpContext="Regions" ShowHelpInitially="false" />

<ListboxSelector OnSelected="OnSelectedCountry" Items="Countries" ItemType="Country" IsVisible="IsSelectCountryVisible" SelectedId=CountryId />


@if (Principal.IsCountryOrGlobalAdministrator())
{
    <AppButton Label="Add" Href="@EditHref(0)" />
}

<TableTemplate Items="Regions" HideNoRecordsToDisplay=true>
    <TableHeader>
        <th>@Localizer["Name"]</th>
        <th>@Localizer["Country"]</th>
        <th>@Localizer["Description"]</th>
        <th>@Localizer["RepresentativeStation"]</th>
        <th>@Localizer["Actions"]</th>
    </TableHeader>
    <RowTemplate Context="region">
        <td style="color: @region.ForeColor; background-color: @region.BackColor; font-weight: bold">@region.LocalName</td>
        <td><img src="images/flags/@(region.Country.DomainSuffix).png" /> @region.Country.EnglishName.AsLocalized()</td>
        <td>@region.Description</td>
        <td>@(region.RepresentativeExternalStation?.FullName ?? Localizer["NotDefined"])</td>
        <td>
            @if (Principal.IsCountryAdministratorInCountry(region.CountryId))
            {

                <AppButton Label="Edit" Href="@EditHref(region.Id)" />
            }
        </td>
    </RowTemplate>
</TableTemplate>

@code {
    [CascadingParameter] private Task<AuthenticationState>? AuthenticationStateTask { get; set; }
    [Parameter] public int CountryId { get; set; }
    ClaimsPrincipal? Principal;
    IEnumerable<Region>? Regions;
    IEnumerable<ListboxItem>? Countries;


    bool IsSelectCountryVisible => Countries is not null && Countries.Count() > 1;


    void OnSelectedCountry(int id)
    {
        if (id > 0)
        {
            AppService.LastCountryId = id;
            Navigator.NavigateTo(IndexHref);
        }
    }

    protected async override Task OnInitializedAsync()
    {
        Principal = await AuthenticationStateTask.GetClaimsPrincipalAsync();
        Countries = await CountryService.ListboxItemsAsync(Principal, true);
        Regions = Array.Empty<Region>();
    }

    protected override async Task OnParametersSetAsync()
    {
        if (CountryId < 1)
        {
            //var id = Principal.CountryId();
            //AppService.LastCountryId = id;
            Navigator.NavigateTo(IndexHref);
        }
        else
        {
            AppService.LastCountryId = CountryId;
            Regions = await RegionService.AllAsync(Principal, AppService.LastCountryId);
        }
    }

    string EditHref(int id) => $"regions/{id}/edit";
    string IndexHref => $"Regions/Country/{AppService.LastCountryId}";

}
